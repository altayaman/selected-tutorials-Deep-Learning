<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0057)https://statcompute.wordpress.com/category/deep-learning/ -->
<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head profile="http://gmpg.org/xfn/11"><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>Deep Learning | Yet Another Blog in Statistical Computing</title>
<link rel="pingback" href="https://statcompute.wordpress.com/xmlrpc.php">
<link rel="dns-prefetch" href="https://s2.wp.com/">
<link rel="dns-prefetch" href="https://s0.wp.com/">
<link rel="dns-prefetch" href="https://s1.wp.com/">
<link rel="alternate" type="application/rss+xml" title="Yet Another Blog in Statistical Computing » Feed" href="https://statcompute.wordpress.com/feed/">
<link rel="alternate" type="application/rss+xml" title="Yet Another Blog in Statistical Computing » Comments Feed" href="https://statcompute.wordpress.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="Yet Another Blog in Statistical Computing » Deep Learning Category Feed" href="https://statcompute.wordpress.com/category/deep-learning/feed/">
	<script defer="" src="./Deep Learning _ Yet Another Blog in Statistical Computing_files/beacon.js"></script><script type="text/javascript">
		/* <![CDATA[ */
		function addLoadEvent(func) {
			var oldonload = window.onload;
			if (typeof window.onload != 'function') {
				window.onload = func;
			} else {
				window.onload = function () {
					oldonload();
					func();
				}
			}
		}
		/* ]]> */
	</script>
			<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s0.wp.com\/wp-content\/mu-plugins\/wpcom-smileys\/twemoji\/2\/72x72\/","ext":".png","svgUrl":"https:\/\/s0.wp.com\/wp-content\/mu-plugins\/wpcom-smileys\/twemoji\/2\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/s1.wp.com\/wp-includes\/js\/wp-emoji-release.min.js?m=1488818651h&ver=4.7.4"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),!(j.toDataURL().length<3e3)&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57331,65039,8205,55356,57096),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57331,55356,57096),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55357,56425,55356,57341,8205,55357,56507),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55357,56425,55356,57341,55357,56507),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script><script src="./Deep Learning _ Yet Another Blog in Statistical Computing_files/wp-emoji-release.min.js" type="text/javascript" defer=""></script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel="stylesheet" id="all-css-0-1" href="./Deep Learning _ Yet Another Blog in Statistical Computing_files/saved_resource" type="text/css" media="all">
<!--[if IE 6]>
<link rel='stylesheet' id='journalist-ie6-css'  href='https://s0.wp.com/wp-content/themes/pub/journalist/ie6.css?m=1270837707h&#038;ver=4.7.4' type='text/css' media='all' />
<![endif]-->
<link rel="stylesheet" id="all-css-2-1" href="./Deep Learning _ Yet Another Blog in Statistical Computing_files/saved_resource(1)" type="text/css" media="all">
<link rel="stylesheet" id="print-css-3-1" href="./Deep Learning _ Yet Another Blog in Statistical Computing_files/global-print.css" type="text/css" media="print">
<link rel="stylesheet" id="all-css-4-1" href="./Deep Learning _ Yet Another Blog in Statistical Computing_files/saved_resource(2)" type="text/css" media="all">
<script type="text/javascript" src="./Deep Learning _ Yet Another Blog in Statistical Computing_files/saved_resource(3)"></script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://statcompute.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://s1.wp.com/wp-includes/wlwmanifest.xml"> 
<meta name="generator" content="WordPress.com">
<link rel="shortcut icon" type="image/x-icon" href="https://secure.gravatar.com/blavatar/85708d077608b826887ea81e9621d635?s=32" sizes="16x16">
<link rel="icon" type="image/x-icon" href="https://secure.gravatar.com/blavatar/85708d077608b826887ea81e9621d635?s=32" sizes="16x16">
<link rel="apple-touch-icon-precomposed" href="https://secure.gravatar.com/blavatar/85708d077608b826887ea81e9621d635?s=114">
<link rel="openid.server" href="https://statcompute.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="https://statcompute.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="https://statcompute.wordpress.com/osd.xml" title="Yet Another Blog in Statistical Computing">
<link rel="search" type="application/opensearchdescription+xml" href="https://s1.wp.com/opensearch.xml" title="WordPress.com">
		<style id="wpcom-hotfix-masterbar-style">
			@media screen and (min-width: 783px) {
				#wpadminbar .quicklinks li#wp-admin-bar-my-account.with-avatar > a img {
					margin-top: 5px;
				}
			}
		</style>
		<meta name="application-name" content="Yet Another Blog in Statistical Computing"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="I can calculate the motion of heavenly bodies but not the madness of people. -Isaac Newton"><meta name="msapplication-task" content="name=Subscribe;action-uri=https://statcompute.wordpress.com/feed/;icon-uri=https://secure.gravatar.com/blavatar/85708d077608b826887ea81e9621d635?s=16"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=https://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=https://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=https://s2.wp.com/i/favicon.ico"><meta name="title" content="Posts about Deep Learning on Yet Another Blog in Statistical Computing">
<meta name="description" content="Posts about Deep Learning written by statcompute">
<link rel="stylesheet" type="text/css" href="./Deep Learning _ Yet Another Blog in Statistical Computing_files/shCore.css"><link rel="stylesheet" type="text/css" href="./Deep Learning _ Yet Another Blog in Statistical Computing_files/shThemeDefault.css"><style type="text/css" id="syntaxhighlighteranchor"></style>
</head>

<body class="archive category category-deep-learning category-1131271 mp6 customizer-styles-applied highlander-enabled highlander-light">
<div id="container" class="group">

<h1><a href="https://statcompute.wordpress.com/">Yet Another Blog in Statistical Computing</a></h1>
<div id="bubble"><p>I can calculate the motion of heavenly bodies but not the madness of people. -Isaac Newton</p></div> <!-- erase this line if you want to turn the bubble off -->

<div id="content">

<h2 class="archive">Archive for the ‘<strong>Deep Learning</strong>’ Category</h2>

<div class="post-2679 post type-post status-publish format-standard hentry category-big-data category-deep-learning category-machine-learning category-parallelism category-python category-statistical-models tag-deep-learning">
	<h2 id="post-2679"><a href="https://statcompute.wordpress.com/2017/04/10/random-search-for-optimal-parameters/" rel="bookmark">Random Search for Optimal&nbsp;Parameters</a></h2>
	
	<div class="main">
		<p>Practices of manual search, grid search, or the combination of both have been successfully employed in the machine learning to optimize hyper-parameters. However, in the arena of deep learning, both approaches might become impractical. For instance, the computing cost of grid search for hyper-parameters in a multi-layer deep neural network (DNN) could be prohibitively high. </p>
<p>In light of aforementioned hurdles, Bergstra and Bengio proposed a novel idea of random search in the paper <a href="http://www.jmlr.org/papers/volume13/bergstra12a/bergstra12a.pdf" rel="nofollow">http://www.jmlr.org/papers/volume13/bergstra12a/bergstra12a.pdf</a>. In their study, it was found that random search is more efficient than grid search for the hyper-parameter optimization in terms of computing costs.</p>
<p>In the example below, it is shown that both grid search and random search have reached similar results in the SVM parameter optimization based on cross-validations. </p>
<div><div id="highlighter_523938" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">import</code> <code class="python plain">pandas as pd</code></div><div class="line number2 index1 alt1"><code class="python keyword">import</code> <code class="python plain">numpy as np</code></div><div class="line number3 index2 alt2"><code class="python keyword">from</code> <code class="python plain">sklearn </code><code class="python keyword">import</code> <code class="python plain">preprocessing</code></div><div class="line number4 index3 alt1"><code class="python keyword">from</code> <code class="python plain">sklearn.model_selection </code><code class="python keyword">import</code> <code class="python plain">GridSearchCV, RandomizedSearchCV </code></div><div class="line number5 index4 alt2"><code class="python keyword">from</code> <code class="python plain">sklearn.svm </code><code class="python keyword">import</code> <code class="python plain">SVC as svc </code></div><div class="line number6 index5 alt1"><code class="python keyword">from</code> <code class="python plain">sklearn.metrics </code><code class="python keyword">import</code> <code class="python plain">make_scorer, roc_auc_score</code></div><div class="line number7 index6 alt2"><code class="python keyword">from</code> <code class="python plain">scipy </code><code class="python keyword">import</code> <code class="python plain">stats</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="python comments"># DATA PREPARATION</code></div><div class="line number10 index9 alt1"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">pd.read_csv(</code><code class="python string">"credit_count.txt"</code><code class="python plain">)</code></div><div class="line number11 index10 alt2"><code class="python plain">y </code><code class="python keyword">=</code> <code class="python plain">df[df.CARDHLDR </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">].DEFAULT.values </code></div><div class="line number12 index11 alt1"><code class="python plain">x </code><code class="python keyword">=</code> <code class="python plain">preprocessing.scale(df[df.CARDHLDR </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">].ix[:, </code><code class="python value">2</code><code class="python plain">:</code><code class="python value">12</code><code class="python plain">], axis </code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">) </code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="python comments"># DEFINE MODEL AND PERFORMANCE MEASURE</code></div><div class="line number15 index14 alt2"><code class="python plain">mdl </code><code class="python keyword">=</code> <code class="python plain">svc(probability </code><code class="python keyword">=</code> <code class="python color1">True</code><code class="python plain">, random_state </code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">)</code></div><div class="line number16 index15 alt1"><code class="python plain">auc </code><code class="python keyword">=</code> <code class="python plain">make_scorer(roc_auc_score)</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="python comments"># GRID SEARCH FOR 20 COMBINATIONS OF PARAMETERS</code></div><div class="line number19 index18 alt2"><code class="python plain">grid_list </code><code class="python keyword">=</code> <code class="python plain">{</code><code class="python string">"C"</code><code class="python plain">: np.arange(</code><code class="python value">2</code><code class="python plain">, </code><code class="python value">10</code><code class="python plain">, </code><code class="python value">2</code><code class="python plain">),</code></div><div class="line number20 index19 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">"gamma"</code><code class="python plain">: np.arange(</code><code class="python value">0.1</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">, </code><code class="python value">0.2</code><code class="python plain">)}</code></div><div class="line number21 index20 alt2">&nbsp;</div><div class="line number22 index21 alt1"><code class="python plain">grid_search </code><code class="python keyword">=</code> <code class="python plain">GridSearchCV(mdl, param_grid </code><code class="python keyword">=</code> <code class="python plain">grid_list, n_jobs </code><code class="python keyword">=</code> <code class="python value">4</code><code class="python plain">, cv </code><code class="python keyword">=</code> <code class="python value">3</code><code class="python plain">, scoring </code><code class="python keyword">=</code> <code class="python plain">auc) </code></div><div class="line number23 index22 alt2"><code class="python plain">grid_search.fit(x, y) </code></div><div class="line number24 index23 alt1"><code class="python plain">grid_search.cv_results_</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="python comments"># RANDOM SEARCH FOR 20 COMBINATIONS OF PARAMETERS</code></div><div class="line number27 index26 alt2"><code class="python plain">rand_list </code><code class="python keyword">=</code> <code class="python plain">{</code><code class="python string">"C"</code><code class="python plain">: stats.uniform(</code><code class="python value">2</code><code class="python plain">, </code><code class="python value">10</code><code class="python plain">),</code></div><div class="line number28 index27 alt1"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="python string">"gamma"</code><code class="python plain">: stats.uniform(</code><code class="python value">0.1</code><code class="python plain">, </code><code class="python value">1</code><code class="python plain">)}</code></div><div class="line number29 index28 alt2"><code class="python spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div><div class="line number30 index29 alt1"><code class="python plain">rand_search </code><code class="python keyword">=</code> <code class="python plain">RandomizedSearchCV(mdl, param_distributions </code><code class="python keyword">=</code> <code class="python plain">rand_list, n_iter </code><code class="python keyword">=</code> <code class="python value">20</code><code class="python plain">, n_jobs </code><code class="python keyword">=</code> <code class="python value">4</code><code class="python plain">, cv </code><code class="python keyword">=</code> <code class="python value">3</code><code class="python plain">, random_state </code><code class="python keyword">=</code> <code class="python value">2017</code><code class="python plain">, scoring </code><code class="python keyword">=</code> <code class="python plain">auc) </code></div><div class="line number31 index30 alt2"><code class="python plain">rand_search.fit(x, y) </code></div><div class="line number32 index31 alt1"><code class="python plain">rand_search.cv_results_</code></div></div></td></tr></tbody></table></div></div>
	</div>

	<div class="meta group">
		<div class="signature">
			<p>Written by statcompute <span class="edit"></span></p>
			<p>April 10, 2017 at 12:07 am</p>
		</div>
		<div class="tags">
			<p>Posted in <a href="https://statcompute.wordpress.com/category/big-data/" rel="category tag">Big Data</a>, <a href="https://statcompute.wordpress.com/category/deep-learning/" rel="category tag">Deep Learning</a>, <a href="https://statcompute.wordpress.com/category/machine-learning/" rel="category tag">Machine Learning</a>, <a href="https://statcompute.wordpress.com/category/parallelism/" rel="category tag">Parallelism</a>, <a href="https://statcompute.wordpress.com/category/python/" rel="category tag">PYTHON</a>, <a href="https://statcompute.wordpress.com/category/statistical-models/" rel="category tag">Statistical Models</a></p>
			<p>Tagged with <a href="https://statcompute.wordpress.com/tag/deep-learning/" rel="tag">Deep Learning</a></p>		</div>
	</div>
</div>
<div class="post-2641 post type-post status-publish format-standard hentry category-big-data category-convolutional-neural-networks category-deep-learning category-keras category-machine-learning category-python tag-cnn tag-deep-learning tag-keras tag-python-2">
	<h2 id="post-2641"><a href="https://statcompute.wordpress.com/2017/04/02/a-simple-convolutional-neural-network-for-the-binary-outcome/" rel="bookmark">A Simple Convolutional Neural Network for The Binary&nbsp;Outcome</a></h2>
	
	<div class="main">
		<p>Since CNN(Convolutional Neural Networks) have achieved a tremendous success in various challenging applications, e.g. image or digit recognitions, one might wonder how to employ CNNs in classification problems with binary outcomes. </p>
<p>Below is an example showing how to use a simple 1D convolutional neural network to predict credit card defaults.</p>
<div><div id="highlighter_533980" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python comments">### LOAD PACKAGES </code></div><div class="line number2 index1 alt1"><code class="python keyword">from</code> <code class="python plain">numpy.random </code><code class="python keyword">import</code> <code class="python plain">seed</code></div><div class="line number3 index2 alt2"><code class="python keyword">from</code> <code class="python plain">pandas </code><code class="python keyword">import</code> <code class="python plain">read_csv, DataFrame</code></div><div class="line number4 index3 alt1"><code class="python keyword">from</code> <code class="python plain">sklearn.preprocessing </code><code class="python keyword">import</code> <code class="python plain">minmax_scale</code></div><div class="line number5 index4 alt2"><code class="python keyword">from</code> <code class="python plain">keras.layers.convolutional </code><code class="python keyword">import</code> <code class="python plain">Conv1D, MaxPooling1D</code></div><div class="line number6 index5 alt1"><code class="python keyword">from</code> <code class="python plain">keras.optimizers </code><code class="python keyword">import</code> <code class="python plain">SGD</code></div><div class="line number7 index6 alt2"><code class="python keyword">from</code> <code class="python plain">keras.models </code><code class="python keyword">import</code> <code class="python plain">Sequential</code></div><div class="line number8 index7 alt1"><code class="python keyword">from</code> <code class="python plain">keras.layers </code><code class="python keyword">import</code> <code class="python plain">Dense, Flatten</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="python comments">### PREPARE THE DATA </code></div><div class="line number11 index10 alt2"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">read_csv(</code><code class="python string">"credit_count.txt"</code><code class="python plain">)</code></div><div class="line number12 index11 alt1"><code class="python plain">Y </code><code class="python keyword">=</code> <code class="python plain">df[df.CARDHLDR </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">].DEFAULT</code></div><div class="line number13 index12 alt2"><code class="python plain">X </code><code class="python keyword">=</code> <code class="python plain">minmax_scale(df[df.CARDHLDR </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">].ix[:, </code><code class="python value">2</code><code class="python plain">:</code><code class="python value">12</code><code class="python plain">], axis </code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">)</code></div><div class="line number14 index13 alt1"><code class="python plain">y_train </code><code class="python keyword">=</code> <code class="python plain">Y.values</code></div><div class="line number15 index14 alt2"><code class="python plain">x_train </code><code class="python keyword">=</code> <code class="python plain">X.reshape(X.shape[</code><code class="python value">0</code><code class="python plain">], X.shape[</code><code class="python value">1</code><code class="python plain">], </code><code class="python value">1</code><code class="python plain">)</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="python comments">### FIT A 1D CONVOLUTIONAL NEURAL NETWORK</code></div><div class="line number18 index17 alt1"><code class="python plain">seed(</code><code class="python value">2017</code><code class="python plain">)</code></div><div class="line number19 index18 alt2"><code class="python plain">conv </code><code class="python keyword">=</code> <code class="python plain">Sequential()</code></div><div class="line number20 index19 alt1"><code class="python plain">conv.add(Conv1D(</code><code class="python value">20</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">, input_shape </code><code class="python keyword">=</code> <code class="python plain">x_train.shape[</code><code class="python value">1</code><code class="python plain">:</code><code class="python value">3</code><code class="python plain">], activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">))</code></div><div class="line number21 index20 alt2"><code class="python plain">conv.add(MaxPooling1D(</code><code class="python value">2</code><code class="python plain">))</code></div><div class="line number22 index21 alt1"><code class="python plain">conv.add(Flatten())</code></div><div class="line number23 index22 alt2"><code class="python plain">conv.add(Dense(</code><code class="python value">1</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'sigmoid'</code><code class="python plain">))</code></div><div class="line number24 index23 alt1"><code class="python plain">sgd </code><code class="python keyword">=</code> <code class="python plain">SGD(lr </code><code class="python keyword">=</code> <code class="python value">0.1</code><code class="python plain">, momentum </code><code class="python keyword">=</code> <code class="python value">0.9</code><code class="python plain">, decay </code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">, nesterov </code><code class="python keyword">=</code> <code class="python color1">False</code><code class="python plain">)</code></div><div class="line number25 index24 alt2"><code class="python plain">conv.</code><code class="python functions">compile</code><code class="python plain">(loss </code><code class="python keyword">=</code> <code class="python string">'binary_crossentropy'</code><code class="python plain">, optimizer </code><code class="python keyword">=</code> <code class="python plain">sgd, metrics </code><code class="python keyword">=</code> <code class="python plain">[</code><code class="python string">'accuracy'</code><code class="python plain">])</code></div><div class="line number26 index25 alt1"><code class="python plain">conv.fit(x_train, y_train, batch_size </code><code class="python keyword">=</code> <code class="python value">500</code><code class="python plain">, epochs </code><code class="python keyword">=</code> <code class="python value">100</code><code class="python plain">, verbose </code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">)</code></div></div></td></tr></tbody></table></div></div>
<p>Considering that 1D is the special case of 2D, we can also solve the same problem with a 2D convolutional neural network by changing the input shape, as shown below.</p>
<div><div id="highlighter_586963" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">numpy.random </code><code class="python keyword">import</code> <code class="python plain">seed</code></div><div class="line number2 index1 alt1"><code class="python keyword">from</code> <code class="python plain">pandas </code><code class="python keyword">import</code> <code class="python plain">read_csv, DataFrame</code></div><div class="line number3 index2 alt2"><code class="python keyword">from</code> <code class="python plain">sklearn.preprocessing </code><code class="python keyword">import</code> <code class="python plain">minmax_scale</code></div><div class="line number4 index3 alt1"><code class="python keyword">from</code> <code class="python plain">keras_diagram </code><code class="python keyword">import</code> <code class="python plain">ascii</code></div><div class="line number5 index4 alt2"><code class="python keyword">from</code> <code class="python plain">keras.layers.convolutional </code><code class="python keyword">import</code> <code class="python plain">Conv2D, MaxPooling2D</code></div><div class="line number6 index5 alt1"><code class="python keyword">from</code> <code class="python plain">keras.optimizers </code><code class="python keyword">import</code> <code class="python plain">SGD</code></div><div class="line number7 index6 alt2"><code class="python keyword">from</code> <code class="python plain">keras.models </code><code class="python keyword">import</code> <code class="python plain">Sequential</code></div><div class="line number8 index7 alt1"><code class="python keyword">from</code> <code class="python plain">keras.layers </code><code class="python keyword">import</code> <code class="python plain">Dense, Flatten</code></div><div class="line number9 index8 alt2">&nbsp;</div><div class="line number10 index9 alt1"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">read_csv(</code><code class="python string">"credit_count.txt"</code><code class="python plain">)</code></div><div class="line number11 index10 alt2"><code class="python plain">Y </code><code class="python keyword">=</code> <code class="python plain">df[df.CARDHLDR </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">].DEFAULT</code></div><div class="line number12 index11 alt1"><code class="python plain">X </code><code class="python keyword">=</code> <code class="python plain">minmax_scale(df[df.CARDHLDR </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">].ix[:, </code><code class="python value">2</code><code class="python plain">:</code><code class="python value">12</code><code class="python plain">], axis </code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">)</code></div><div class="line number13 index12 alt2"><code class="python plain">y_train </code><code class="python keyword">=</code> <code class="python plain">Y.values</code></div><div class="line number14 index13 alt1"><code class="python plain">x_train </code><code class="python keyword">=</code> <code class="python plain">X.reshape(X.shape[</code><code class="python value">0</code><code class="python plain">], </code><code class="python value">1</code><code class="python plain">, X.shape[</code><code class="python value">1</code><code class="python plain">], </code><code class="python value">1</code><code class="python plain">)</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="python plain">seed(</code><code class="python value">2017</code><code class="python plain">)</code></div><div class="line number17 index16 alt2"><code class="python plain">conv </code><code class="python keyword">=</code> <code class="python plain">Sequential()</code></div><div class="line number18 index17 alt1"><code class="python plain">conv.add(Conv2D(</code><code class="python value">20</code><code class="python plain">, (</code><code class="python value">1</code><code class="python plain">, </code><code class="python value">4</code><code class="python plain">), input_shape </code><code class="python keyword">=</code> <code class="python plain">x_train.shape[</code><code class="python value">1</code><code class="python plain">:</code><code class="python value">4</code><code class="python plain">], activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">))</code></div><div class="line number19 index18 alt2"><code class="python plain">conv.add(MaxPooling2D((</code><code class="python value">1</code><code class="python plain">, </code><code class="python value">2</code><code class="python plain">)))</code></div><div class="line number20 index19 alt1"><code class="python plain">conv.add(Flatten())</code></div><div class="line number21 index20 alt2"><code class="python plain">conv.add(Dense(</code><code class="python value">1</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'sigmoid'</code><code class="python plain">))</code></div><div class="line number22 index21 alt1"><code class="python plain">sgd </code><code class="python keyword">=</code> <code class="python plain">SGD(lr </code><code class="python keyword">=</code> <code class="python value">0.1</code><code class="python plain">, momentum </code><code class="python keyword">=</code> <code class="python value">0.9</code><code class="python plain">, decay </code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">, nesterov </code><code class="python keyword">=</code> <code class="python color1">False</code><code class="python plain">)</code></div><div class="line number23 index22 alt2"><code class="python plain">conv.</code><code class="python functions">compile</code><code class="python plain">(loss </code><code class="python keyword">=</code> <code class="python string">'binary_crossentropy'</code><code class="python plain">, optimizer </code><code class="python keyword">=</code> <code class="python plain">sgd, metrics </code><code class="python keyword">=</code> <code class="python plain">[</code><code class="python string">'accuracy'</code><code class="python plain">])</code></div><div class="line number24 index23 alt1"><code class="python plain">conv.fit(x_train, y_train, batch_size </code><code class="python keyword">=</code> <code class="python value">500</code><code class="python plain">, epochs </code><code class="python keyword">=</code> <code class="python value">100</code><code class="python plain">, verbose </code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">)</code></div></div></td></tr></tbody></table></div></div>
	</div>

	<div class="meta group">
		<div class="signature">
			<p>Written by statcompute <span class="edit"></span></p>
			<p>April 2, 2017 at 11:45 pm</p>
		</div>
		<div class="tags">
			<p>Posted in <a href="https://statcompute.wordpress.com/category/big-data/" rel="category tag">Big Data</a>, <a href="https://statcompute.wordpress.com/category/convolutional-neural-networks/" rel="category tag">Convolutional Neural Networks</a>, <a href="https://statcompute.wordpress.com/category/deep-learning/" rel="category tag">Deep Learning</a>, <a href="https://statcompute.wordpress.com/category/keras/" rel="category tag">Keras</a>, <a href="https://statcompute.wordpress.com/category/machine-learning/" rel="category tag">Machine Learning</a>, <a href="https://statcompute.wordpress.com/category/python/" rel="category tag">PYTHON</a></p>
			<p>Tagged with <a href="https://statcompute.wordpress.com/tag/cnn/" rel="tag">CNN</a>, <a href="https://statcompute.wordpress.com/tag/deep-learning/" rel="tag">Deep Learning</a>, <a href="https://statcompute.wordpress.com/tag/keras/" rel="tag">Keras</a>, <a href="https://statcompute.wordpress.com/tag/python-2/" rel="tag">Python</a></p>		</div>
	</div>
</div>
<div class="post-2357 post type-post status-publish format-standard hentry category-big-data category-deep-learning category-keras category-machine-learning category-python category-statistical-models tag-autoencoder tag-deep-learning tag-keras tag-python-2">
	<h2 id="post-2357"><a href="https://statcompute.wordpress.com/2017/01/15/autoencoder-for-dimensionality-reduction/" rel="bookmark">Autoencoder for Dimensionality&nbsp;Reduction</a></h2>
	
	<div class="main">
		<p>We often use ICA or PCA to extract features from the high-dimensional data. The autoencoder is another interesting algorithm to achieve the same purpose in the context of Deep Learning. </p>
<p>with the purpose of learning a function to approximate the input data itself such that F(X) = X, an autoencoder consists of two parts, namely encoder and decoder. While the encoder aims to compress the original input data into a low-dimensional representation, the decoder tries to reconstruct the original input data based on the low-dimension representation generated by the encoder. As a result, the autoencoder has been widely used to remove the data noise as well to reduce the data dimension. </p>
<p>First of all, we will show the basic structure of an autoencoder with 1-layer encoder and 1-layer decoder, as below. In the example, we will compress the input data with 10 columns into a compressed on with 3 columns. </p>
<div><div id="highlighter_625515" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">pandas </code><code class="python keyword">import</code> <code class="python plain">read_csv, DataFrame</code></div><div class="line number2 index1 alt1"><code class="python keyword">from</code> <code class="python plain">numpy.random </code><code class="python keyword">import</code> <code class="python plain">seed</code></div><div class="line number3 index2 alt2"><code class="python keyword">from</code> <code class="python plain">sklearn.preprocessing </code><code class="python keyword">import</code> <code class="python plain">minmax_scale</code></div><div class="line number4 index3 alt1"><code class="python keyword">from</code> <code class="python plain">sklearn.model_selection </code><code class="python keyword">import</code> <code class="python plain">train_test_split</code></div><div class="line number5 index4 alt2"><code class="python keyword">from</code> <code class="python plain">keras.layers </code><code class="python keyword">import</code> <code class="python functions">Input</code><code class="python plain">, Dense</code></div><div class="line number6 index5 alt1"><code class="python keyword">from</code> <code class="python plain">keras.models </code><code class="python keyword">import</code> <code class="python plain">Model</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">read_csv(</code><code class="python string">"credit_count.txt"</code><code class="python plain">)</code></div><div class="line number9 index8 alt2"><code class="python plain">Y </code><code class="python keyword">=</code> <code class="python plain">df[df.CARDHLDR </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">].DEFAULTS</code></div><div class="line number10 index9 alt1"><code class="python plain">X </code><code class="python keyword">=</code> <code class="python plain">df[df.CARDHLDR </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">].ix[:, </code><code class="python value">2</code><code class="python plain">:</code><code class="python value">12</code><code class="python plain">]</code></div><div class="line number11 index10 alt2"><code class="python comments"># SCALE EACH FEATURE INTO [0, 1] RANGE</code></div><div class="line number12 index11 alt1"><code class="python plain">sX </code><code class="python keyword">=</code> <code class="python plain">minmax_scale(X, axis </code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">)</code></div><div class="line number13 index12 alt2"><code class="python plain">ncol </code><code class="python keyword">=</code> <code class="python plain">sX.shape[</code><code class="python value">1</code><code class="python plain">]</code></div><div class="line number14 index13 alt1"><code class="python plain">X_train, X_test, Y_train, Y_test </code><code class="python keyword">=</code> <code class="python plain">train_test_split(sX, Y, train_size </code><code class="python keyword">=</code> <code class="python value">0.5</code><code class="python plain">, random_state </code><code class="python keyword">=</code> <code class="python plain">seed(</code><code class="python value">2017</code><code class="python plain">))</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="python comments">### AN EXAMPLE OF SIMPLE AUTOENCODER ###</code></div><div class="line number17 index16 alt2"><code class="python comments"># InputLayer (None, 10)</code></div><div class="line number18 index17 alt1"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dense (None, 5)</code></div><div class="line number19 index18 alt2"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dense (None, 10)</code></div><div class="line number20 index19 alt1">&nbsp;</div><div class="line number21 index20 alt2"><code class="python plain">input_dim </code><code class="python keyword">=</code> <code class="python functions">Input</code><code class="python plain">(shape </code><code class="python keyword">=</code> <code class="python plain">(ncol, ))</code></div><div class="line number22 index21 alt1"><code class="python comments"># DEFINE THE DIMENSION OF ENCODER ASSUMED 3</code></div><div class="line number23 index22 alt2"><code class="python plain">encoding_dim </code><code class="python keyword">=</code> <code class="python value">3</code></div><div class="line number24 index23 alt1"><code class="python comments"># DEFINE THE ENCODER LAYER</code></div><div class="line number25 index24 alt2"><code class="python plain">encoded </code><code class="python keyword">=</code> <code class="python plain">Dense(encoding_dim, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">)(input_dim)</code></div><div class="line number26 index25 alt1"><code class="python comments"># DEFINE THE DECODER LAYER</code></div><div class="line number27 index26 alt2"><code class="python plain">decoded </code><code class="python keyword">=</code> <code class="python plain">Dense(ncol, activation </code><code class="python keyword">=</code> <code class="python string">'sigmoid'</code><code class="python plain">)(encoded)</code></div><div class="line number28 index27 alt1"><code class="python comments"># COMBINE ENCODER AND DECODER INTO AN AUTOENCODER MODEL</code></div><div class="line number29 index28 alt2"><code class="python plain">autoencoder </code><code class="python keyword">=</code> <code class="python plain">Model(</code><code class="python functions">input</code> <code class="python keyword">=</code> <code class="python plain">input_dim, output </code><code class="python keyword">=</code> <code class="python plain">decoded)</code></div><div class="line number30 index29 alt1"><code class="python comments"># CONFIGURE AND TRAIN THE AUTOENCODER</code></div><div class="line number31 index30 alt2"><code class="python plain">autoencoder.</code><code class="python functions">compile</code><code class="python plain">(optimizer </code><code class="python keyword">=</code> <code class="python string">'adadelta'</code><code class="python plain">, loss </code><code class="python keyword">=</code> <code class="python string">'binary_crossentropy'</code><code class="python plain">)</code></div><div class="line number32 index31 alt1"><code class="python plain">autoencoder.fit(X_train, X_train, nb_epoch </code><code class="python keyword">=</code> <code class="python value">50</code><code class="python plain">, batch_size </code><code class="python keyword">=</code> <code class="python value">100</code><code class="python plain">, shuffle </code><code class="python keyword">=</code> <code class="python color1">True</code><code class="python plain">, validation_data </code><code class="python keyword">=</code> <code class="python plain">(X_test, X_test))</code></div><div class="line number33 index32 alt2"><code class="python comments"># THE ENCODER TO EXTRACT THE REDUCED DIMENSION FROM THE ABOVE AUTOENCODER</code></div><div class="line number34 index33 alt1"><code class="python plain">encoder </code><code class="python keyword">=</code> <code class="python plain">Model(</code><code class="python functions">input</code> <code class="python keyword">=</code> <code class="python plain">input_dim, output </code><code class="python keyword">=</code> <code class="python plain">encoded)</code></div><div class="line number35 index34 alt2"><code class="python plain">encoded_input </code><code class="python keyword">=</code> <code class="python functions">Input</code><code class="python plain">(shape </code><code class="python keyword">=</code> <code class="python plain">(encoding_dim, ))</code></div><div class="line number36 index35 alt1"><code class="python plain">encoded_out </code><code class="python keyword">=</code> <code class="python plain">encoder.predict(X_test)</code></div><div class="line number37 index36 alt2"><code class="python plain">encoded_out[</code><code class="python value">0</code><code class="python plain">:</code><code class="python value">2</code><code class="python plain">]</code></div><div class="line number38 index37 alt1"><code class="python comments">#array([[ 0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp; 1.26510417,&nbsp; 1.62803197],</code></div><div class="line number39 index38 alt2"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 2.32508397,&nbsp; 0.99735016,&nbsp; 2.06461048]], dtype=float32)</code></div></div></td></tr></tbody></table></div></div>
<p>In the next example, we will relax the constraint of layers and employ a stack of layers to achievement the same purpose as above. </p>
<div><div id="highlighter_482245" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python comments">### AN EXAMPLE OF DEEP AUTOENCODER WITH MULTIPLE LAYERS</code></div><div class="line number2 index1 alt1"><code class="python comments"># InputLayer (None, 10)</code></div><div class="line number3 index2 alt2"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dense (None, 20)</code></div><div class="line number4 index3 alt1"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dense (None, 10)</code></div><div class="line number5 index4 alt2"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dense (None, 5)</code></div><div class="line number6 index5 alt1"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dense (None, 3)</code></div><div class="line number7 index6 alt2"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dense (None, 5)</code></div><div class="line number8 index7 alt1"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dense (None, 10)</code></div><div class="line number9 index8 alt2"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dense (None, 20)</code></div><div class="line number10 index9 alt1"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dense (None, 10)</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="python plain">input_dim </code><code class="python keyword">=</code> <code class="python functions">Input</code><code class="python plain">(shape </code><code class="python keyword">=</code> <code class="python plain">(ncol, ))</code></div><div class="line number13 index12 alt2"><code class="python comments"># DEFINE THE DIMENSION OF ENCODER ASSUMED 3</code></div><div class="line number14 index13 alt1"><code class="python plain">encoding_dim </code><code class="python keyword">=</code> <code class="python value">3</code></div><div class="line number15 index14 alt2"><code class="python comments"># DEFINE THE ENCODER LAYERS</code></div><div class="line number16 index15 alt1"><code class="python plain">encoded1 </code><code class="python keyword">=</code> <code class="python plain">Dense(</code><code class="python value">20</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">)(input_dim)</code></div><div class="line number17 index16 alt2"><code class="python plain">encoded2 </code><code class="python keyword">=</code> <code class="python plain">Dense(</code><code class="python value">10</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">)(encoded1)</code></div><div class="line number18 index17 alt1"><code class="python plain">encoded3 </code><code class="python keyword">=</code> <code class="python plain">Dense(</code><code class="python value">5</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">)(encoded2)</code></div><div class="line number19 index18 alt2"><code class="python plain">encoded4 </code><code class="python keyword">=</code> <code class="python plain">Dense(encoding_dim, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">)(encoded3)</code></div><div class="line number20 index19 alt1"><code class="python comments"># DEFINE THE DECODER LAYERS</code></div><div class="line number21 index20 alt2"><code class="python plain">decoded1 </code><code class="python keyword">=</code> <code class="python plain">Dense(</code><code class="python value">5</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">)(encoded4)</code></div><div class="line number22 index21 alt1"><code class="python plain">decoded2 </code><code class="python keyword">=</code> <code class="python plain">Dense(</code><code class="python value">10</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">)(decoded1)</code></div><div class="line number23 index22 alt2"><code class="python plain">decoded3 </code><code class="python keyword">=</code> <code class="python plain">Dense(</code><code class="python value">20</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">)(decoded2)</code></div><div class="line number24 index23 alt1"><code class="python plain">decoded4 </code><code class="python keyword">=</code> <code class="python plain">Dense(ncol, activation </code><code class="python keyword">=</code> <code class="python string">'sigmoid'</code><code class="python plain">)(decoded3)</code></div><div class="line number25 index24 alt2"><code class="python comments"># COMBINE ENCODER AND DECODER INTO AN AUTOENCODER MODEL</code></div><div class="line number26 index25 alt1"><code class="python plain">autoencoder </code><code class="python keyword">=</code> <code class="python plain">Model(</code><code class="python functions">input</code> <code class="python keyword">=</code> <code class="python plain">input_dim, output </code><code class="python keyword">=</code> <code class="python plain">decoded4)</code></div><div class="line number27 index26 alt2"><code class="python comments"># CONFIGURE AND TRAIN THE AUTOENCODER</code></div><div class="line number28 index27 alt1"><code class="python plain">autoencoder.</code><code class="python functions">compile</code><code class="python plain">(optimizer </code><code class="python keyword">=</code> <code class="python string">'adadelta'</code><code class="python plain">, loss </code><code class="python keyword">=</code> <code class="python string">'binary_crossentropy'</code><code class="python plain">)</code></div><div class="line number29 index28 alt2"><code class="python plain">autoencoder.fit(X_train, X_train, nb_epoch </code><code class="python keyword">=</code> <code class="python value">100</code><code class="python plain">, batch_size </code><code class="python keyword">=</code> <code class="python value">100</code><code class="python plain">, shuffle </code><code class="python keyword">=</code> <code class="python color1">True</code><code class="python plain">, validation_data </code><code class="python keyword">=</code> <code class="python plain">(X_test, X_test))</code></div><div class="line number30 index29 alt1"><code class="python comments"># THE ENCODER TO EXTRACT THE REDUCED DIMENSION FROM THE ABOVE AUTOENCODER</code></div><div class="line number31 index30 alt2"><code class="python plain">encoder </code><code class="python keyword">=</code> <code class="python plain">Model(</code><code class="python functions">input</code> <code class="python keyword">=</code> <code class="python plain">input_dim, output </code><code class="python keyword">=</code> <code class="python plain">encoded4)</code></div><div class="line number32 index31 alt1"><code class="python plain">encoded_input </code><code class="python keyword">=</code> <code class="python functions">Input</code><code class="python plain">(shape </code><code class="python keyword">=</code> <code class="python plain">(encoding_dim, ))</code></div><div class="line number33 index32 alt2"><code class="python plain">encoded_out </code><code class="python keyword">=</code> <code class="python plain">encoder.predict(X_test)</code></div><div class="line number34 index33 alt1"><code class="python plain">encoded_out[</code><code class="python value">0</code><code class="python plain">:</code><code class="python value">2</code><code class="python plain">]</code></div><div class="line number35 index34 alt2"><code class="python comments">#array([[ 3.74947715,&nbsp; 0.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,&nbsp; 3.22947764],</code></div><div class="line number36 index35 alt1"><code class="python comments">#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ 3.93903661,&nbsp; 0.17448257,&nbsp; 1.86618853]], dtype=float32)</code></div></div></td></tr></tbody></table></div></div>
	</div>

	<div class="meta group">
		<div class="signature">
			<p>Written by statcompute <span class="edit"></span></p>
			<p>January 15, 2017 at 6:19 pm</p>
		</div>
		<div class="tags">
			<p>Posted in <a href="https://statcompute.wordpress.com/category/big-data/" rel="category tag">Big Data</a>, <a href="https://statcompute.wordpress.com/category/deep-learning/" rel="category tag">Deep Learning</a>, <a href="https://statcompute.wordpress.com/category/keras/" rel="category tag">Keras</a>, <a href="https://statcompute.wordpress.com/category/machine-learning/" rel="category tag">Machine Learning</a>, <a href="https://statcompute.wordpress.com/category/python/" rel="category tag">PYTHON</a>, <a href="https://statcompute.wordpress.com/category/statistical-models/" rel="category tag">Statistical Models</a></p>
			<p>Tagged with <a href="https://statcompute.wordpress.com/tag/autoencoder/" rel="tag">Autoencoder</a>, <a href="https://statcompute.wordpress.com/tag/deep-learning/" rel="tag">Deep Learning</a>, <a href="https://statcompute.wordpress.com/tag/keras/" rel="tag">Keras</a>, <a href="https://statcompute.wordpress.com/tag/python-2/" rel="tag">Python</a></p>		</div>
	</div>
</div>
<div class="post-2300 post type-post status-publish format-standard hentry category-deep-learning category-machine-learning category-python category-statistical-models category-statistics tag-deep-learning tag-keras tag-python-2">
	<h2 id="post-2300"><a href="https://statcompute.wordpress.com/2017/01/08/an-example-of-merge-layer-in-keras/" rel="bookmark">An Example of Merge Layer in&nbsp;Keras</a></h2>
	
	<div class="main">
		<p>The power of a DNN does not only come from its depth but also come from its flexibility of accommodating complex network structures. For instance, the DNN shown below consists of two branches, the left with 4 inputs and the right with 6 inputs. In addition, the right branch shows a more complicated structure than the left. </p>
<div><div id="highlighter_612221" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">InputLayer (None, 6)</code></div><div class="line number2 index1 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">Dense (None, 6)</code></div><div class="line number3 index2 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">BatchNormalization (None, 6)</code></div><div class="line number4 index3 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">Dense (None, 6)</code></div><div class="line number5 index4 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">InputLayer (None, 4)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BatchNormalization (None, 6)</code></div><div class="line number6 index5 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">Dense (None, 4)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Dense (None, 6)</code></div><div class="line number7 index6 alt2"><code class="plain plain">BatchNormalization (None, 4)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BatchNormalization (None, 6)</code></div><div class="line number8 index7 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">\____________________________________/</code></div><div class="line number9 index8 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">|</code></div><div class="line number10 index9 alt1"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">Merge (None, 10)</code></div><div class="line number11 index10 alt2"><code class="plain spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain plain">Dense (None, 1)</code></div></div></td></tr></tbody></table></div></div>
<p>To create a DNN as the above, both left and right branches are defined separately with corresponding inputs and layers. In the line 29, both branches would be combined with a MERGE layer. There are multiple benefits of such merged DNNs. For instance, the DNN has the flexibility to handle various inputs differently. In addition, new features can be added conveniently without messing around with the existing network structure. </p>
<div><div id="highlighter_498630" class="syntaxhighlighter  python"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2 highlighted">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="python keyword">from</code> <code class="python plain">pandas </code><code class="python keyword">import</code> <code class="python plain">read_csv, DataFrame</code></div><div class="line number2 index1 alt1"><code class="python keyword">from</code> <code class="python plain">numpy.random </code><code class="python keyword">import</code> <code class="python plain">seed</code></div><div class="line number3 index2 alt2"><code class="python keyword">from</code> <code class="python plain">sklearn.preprocessing </code><code class="python keyword">import</code> <code class="python plain">scale</code></div><div class="line number4 index3 alt1"><code class="python keyword">from</code> <code class="python plain">keras.models </code><code class="python keyword">import</code> <code class="python plain">Sequential</code></div><div class="line number5 index4 alt2"><code class="python keyword">from</code> <code class="python plain">keras.constraints </code><code class="python keyword">import</code> <code class="python plain">maxnorm</code></div><div class="line number6 index5 alt1"><code class="python keyword">from</code> <code class="python plain">keras.optimizers </code><code class="python keyword">import</code> <code class="python plain">SGD</code></div><div class="line number7 index6 alt2"><code class="python keyword">from</code> <code class="python plain">keras.layers </code><code class="python keyword">import</code> <code class="python plain">Dense, Merge</code></div><div class="line number8 index7 alt1"><code class="python keyword">from</code> <code class="python plain">keras.layers.normalization </code><code class="python keyword">import</code> <code class="python plain">BatchNormalization</code></div><div class="line number9 index8 alt2"><code class="python keyword">from</code> <code class="python plain">keras_diagram </code><code class="python keyword">import</code> <code class="python plain">ascii</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="python plain">df </code><code class="python keyword">=</code> <code class="python plain">read_csv(</code><code class="python string">"credit_count.txt"</code><code class="python plain">)</code></div><div class="line number12 index11 alt1"><code class="python plain">Y </code><code class="python keyword">=</code> <code class="python plain">df[df.CARDHLDR </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">].DEFAULTS</code></div><div class="line number13 index12 alt2"><code class="python plain">X1 </code><code class="python keyword">=</code> <code class="python plain">scale(df[df.CARDHLDR </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">][[</code><code class="python string">"MAJORDRG"</code><code class="python plain">, </code><code class="python string">"MINORDRG"</code><code class="python plain">, </code><code class="python string">"OWNRENT"</code><code class="python plain">, </code><code class="python string">"SELFEMPL"</code><code class="python plain">]])</code></div><div class="line number14 index13 alt1"><code class="python plain">X2 </code><code class="python keyword">=</code> <code class="python plain">scale(df[df.CARDHLDR </code><code class="python keyword">=</code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">][[</code><code class="python string">"AGE"</code><code class="python plain">, </code><code class="python string">"ACADMOS"</code><code class="python plain">, </code><code class="python string">"ADEPCNT"</code><code class="python plain">, </code><code class="python string">"INCPER"</code><code class="python plain">, </code><code class="python string">"EXP_INC"</code><code class="python plain">, </code><code class="python string">"INCOME"</code><code class="python plain">]])</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="python plain">branch1 </code><code class="python keyword">=</code> <code class="python plain">Sequential()</code></div><div class="line number17 index16 alt2"><code class="python plain">branch1.add(Dense(X1.shape[</code><code class="python value">1</code><code class="python plain">], input_shape </code><code class="python keyword">=</code> <code class="python plain">(X1.shape[</code><code class="python value">1</code><code class="python plain">],), init </code><code class="python keyword">=</code> <code class="python string">'normal'</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">))</code></div><div class="line number18 index17 alt1"><code class="python plain">branch1.add(BatchNormalization())</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="python plain">branch2 </code><code class="python keyword">=</code> <code class="python plain">Sequential()</code></div><div class="line number21 index20 alt2"><code class="python plain">branch2.add(Dense(X2.shape[</code><code class="python value">1</code><code class="python plain">], input_shape </code><code class="python keyword">=</code>&nbsp; <code class="python plain">(X2.shape[</code><code class="python value">1</code><code class="python plain">],), init </code><code class="python keyword">=</code> <code class="python string">'normal'</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">))</code></div><div class="line number22 index21 alt1"><code class="python plain">branch2.add(BatchNormalization())</code></div><div class="line number23 index22 alt2"><code class="python plain">branch2.add(Dense(X2.shape[</code><code class="python value">1</code><code class="python plain">], init </code><code class="python keyword">=</code> <code class="python string">'normal'</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">, W_constraint </code><code class="python keyword">=</code> <code class="python plain">maxnorm(</code><code class="python value">5</code><code class="python plain">)))</code></div><div class="line number24 index23 alt1"><code class="python plain">branch2.add(BatchNormalization())</code></div><div class="line number25 index24 alt2"><code class="python plain">branch2.add(Dense(X2.shape[</code><code class="python value">1</code><code class="python plain">], init </code><code class="python keyword">=</code> <code class="python string">'normal'</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'relu'</code><code class="python plain">, W_constraint </code><code class="python keyword">=</code> <code class="python plain">maxnorm(</code><code class="python value">5</code><code class="python plain">)))</code></div><div class="line number26 index25 alt1"><code class="python plain">branch2.add(BatchNormalization())</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="python plain">model </code><code class="python keyword">=</code> <code class="python plain">Sequential()</code></div><div class="line number29 index28 alt2 highlighted"><code class="python plain">model.add(Merge([branch1, branch2], mode </code><code class="python keyword">=</code> <code class="python string">'concat'</code><code class="python plain">))</code></div><div class="line number30 index29 alt1"><code class="python plain">model.add(Dense(</code><code class="python value">1</code><code class="python plain">, init </code><code class="python keyword">=</code> <code class="python string">'normal'</code><code class="python plain">, activation </code><code class="python keyword">=</code> <code class="python string">'sigmoid'</code><code class="python plain">))</code></div><div class="line number31 index30 alt2"><code class="python plain">sgd </code><code class="python keyword">=</code> <code class="python plain">SGD(lr </code><code class="python keyword">=</code> <code class="python value">0.1</code><code class="python plain">, momentum </code><code class="python keyword">=</code> <code class="python value">0.9</code><code class="python plain">, decay </code><code class="python keyword">=</code> <code class="python value">0</code><code class="python plain">, nesterov </code><code class="python keyword">=</code> <code class="python color1">False</code><code class="python plain">)</code></div><div class="line number32 index31 alt1"><code class="python plain">model.</code><code class="python functions">compile</code><code class="python plain">(loss </code><code class="python keyword">=</code> <code class="python string">'binary_crossentropy'</code><code class="python plain">, optimizer </code><code class="python keyword">=</code> <code class="python plain">sgd, metrics </code><code class="python keyword">=</code> <code class="python plain">[</code><code class="python string">'accuracy'</code><code class="python plain">])</code></div><div class="line number33 index32 alt2"><code class="python plain">seed(</code><code class="python value">2017</code><code class="python plain">)</code></div><div class="line number34 index33 alt1"><code class="python plain">model.fit([X1, X2], Y.values, batch_size </code><code class="python keyword">=</code> <code class="python value">2000</code><code class="python plain">, nb_epoch </code><code class="python keyword">=</code> <code class="python value">100</code><code class="python plain">, verbose </code><code class="python keyword">=</code> <code class="python value">1</code><code class="python plain">)</code></div></div></td></tr></tbody></table></div></div>
	</div>

	<div class="meta group">
		<div class="signature">
			<p>Written by statcompute <span class="edit"></span></p>
			<p>January 8, 2017 at 4:42 pm</p>
		</div>
		<div class="tags">
			<p>Posted in <a href="https://statcompute.wordpress.com/category/deep-learning/" rel="category tag">Deep Learning</a>, <a href="https://statcompute.wordpress.com/category/machine-learning/" rel="category tag">Machine Learning</a>, <a href="https://statcompute.wordpress.com/category/python/" rel="category tag">PYTHON</a>, <a href="https://statcompute.wordpress.com/category/statistical-models/" rel="category tag">Statistical Models</a>, <a href="https://statcompute.wordpress.com/category/statistics/" rel="category tag">Statistics</a></p>
			<p>Tagged with <a href="https://statcompute.wordpress.com/tag/deep-learning/" rel="tag">Deep Learning</a>, <a href="https://statcompute.wordpress.com/tag/keras/" rel="tag">Keras</a>, <a href="https://statcompute.wordpress.com/tag/python-2/" rel="tag">Python</a></p>		</div>
	</div>
</div>

<div class="navigation group">
	<div class="alignleft"></div>
	<div class="alignright"></div>
</div>

</div>

<div id="sidebar">

<div id="pages">
<h3>Pages</h3>
<ul>
    <li class="page_item page-item-2"><a href="https://statcompute.wordpress.com/about/">About Me</a></li>
</ul>
</div>

<h3>Search</h3>
<p class="searchinfo">search site archives</p>
<div id="search">
<div id="search_area">
    <form id="searchform" method="get" action="https://statcompute.wordpress.com/">
    <div>
        <input class="searchfield" type="text" name="s" id="s" value="" title="Enter keyword to search">
        <input class="submit" type="submit" value="search">
    </div>
    </form>
</div>
</div>

<h3>Blogroll</h3>
<ul>
</ul>

<h3>Archives</h3>
<ul>
	<li><a href="https://statcompute.wordpress.com/2017/04/">April 2017</a></li>
	<li><a href="https://statcompute.wordpress.com/2017/03/">March 2017</a></li>
	<li><a href="https://statcompute.wordpress.com/2017/01/">January 2017</a></li>
	<li><a href="https://statcompute.wordpress.com/2016/12/">December 2016</a></li>
	<li><a href="https://statcompute.wordpress.com/2016/11/">November 2016</a></li>
	<li><a href="https://statcompute.wordpress.com/2016/10/">October 2016</a></li>
	<li><a href="https://statcompute.wordpress.com/2016/09/">September 2016</a></li>
	<li><a href="https://statcompute.wordpress.com/2016/08/">August 2016</a></li>
	<li><a href="https://statcompute.wordpress.com/2016/06/">June 2016</a></li>
	<li><a href="https://statcompute.wordpress.com/2016/05/">May 2016</a></li>
	<li><a href="https://statcompute.wordpress.com/2016/04/">April 2016</a></li>
	<li><a href="https://statcompute.wordpress.com/2016/03/">March 2016</a></li>
	<li><a href="https://statcompute.wordpress.com/2016/01/">January 2016</a></li>
	<li><a href="https://statcompute.wordpress.com/2015/12/">December 2015</a></li>
	<li><a href="https://statcompute.wordpress.com/2015/11/">November 2015</a></li>
	<li><a href="https://statcompute.wordpress.com/2015/10/">October 2015</a></li>
	<li><a href="https://statcompute.wordpress.com/2015/08/">August 2015</a></li>
	<li><a href="https://statcompute.wordpress.com/2015/06/">June 2015</a></li>
	<li><a href="https://statcompute.wordpress.com/2015/05/">May 2015</a></li>
	<li><a href="https://statcompute.wordpress.com/2015/04/">April 2015</a></li>
	<li><a href="https://statcompute.wordpress.com/2015/03/">March 2015</a></li>
	<li><a href="https://statcompute.wordpress.com/2015/01/">January 2015</a></li>
	<li><a href="https://statcompute.wordpress.com/2014/11/">November 2014</a></li>
	<li><a href="https://statcompute.wordpress.com/2014/10/">October 2014</a></li>
	<li><a href="https://statcompute.wordpress.com/2014/09/">September 2014</a></li>
	<li><a href="https://statcompute.wordpress.com/2014/08/">August 2014</a></li>
	<li><a href="https://statcompute.wordpress.com/2014/07/">July 2014</a></li>
	<li><a href="https://statcompute.wordpress.com/2014/03/">March 2014</a></li>
	<li><a href="https://statcompute.wordpress.com/2014/02/">February 2014</a></li>
	<li><a href="https://statcompute.wordpress.com/2013/12/">December 2013</a></li>
	<li><a href="https://statcompute.wordpress.com/2013/10/">October 2013</a></li>
	<li><a href="https://statcompute.wordpress.com/2013/09/">September 2013</a></li>
	<li><a href="https://statcompute.wordpress.com/2013/08/">August 2013</a></li>
	<li><a href="https://statcompute.wordpress.com/2013/07/">July 2013</a></li>
	<li><a href="https://statcompute.wordpress.com/2013/06/">June 2013</a></li>
	<li><a href="https://statcompute.wordpress.com/2013/05/">May 2013</a></li>
	<li><a href="https://statcompute.wordpress.com/2013/04/">April 2013</a></li>
	<li><a href="https://statcompute.wordpress.com/2013/03/">March 2013</a></li>
	<li><a href="https://statcompute.wordpress.com/2013/02/">February 2013</a></li>
	<li><a href="https://statcompute.wordpress.com/2013/01/">January 2013</a></li>
	<li><a href="https://statcompute.wordpress.com/2012/12/">December 2012</a></li>
	<li><a href="https://statcompute.wordpress.com/2012/11/">November 2012</a></li>
	<li><a href="https://statcompute.wordpress.com/2012/10/">October 2012</a></li>
	<li><a href="https://statcompute.wordpress.com/2012/09/">September 2012</a></li>
	<li><a href="https://statcompute.wordpress.com/2012/07/">July 2012</a></li>
	<li><a href="https://statcompute.wordpress.com/2012/06/">June 2012</a></li>
	<li><a href="https://statcompute.wordpress.com/2012/05/">May 2012</a></li>
	<li><a href="https://statcompute.wordpress.com/2012/04/">April 2012</a></li>
	<li><a href="https://statcompute.wordpress.com/2012/03/">March 2012</a></li>
	<li><a href="https://statcompute.wordpress.com/2012/02/">February 2012</a></li>
</ul>

<h3>Categories</h3>
<ul>
    	<li class="cat-item cat-item-2075170"><a href="https://statcompute.wordpress.com/category/big-data/">Big Data</a>
</li>
	<li class="cat-item cat-item-51093"><a href="https://statcompute.wordpress.com/category/blaze/">blaze</a>
</li>
	<li class="cat-item cat-item-2210902"><a href="https://statcompute.wordpress.com/category/ccar/">CCAR</a>
<ul class="children">
	<li class="cat-item cat-item-279527"><a href="https://statcompute.wordpress.com/category/ccar/operational-risk/">Operational Risk</a>
</li>
</ul>
</li>
	<li class="cat-item cat-item-5738990"><a href="https://statcompute.wordpress.com/category/clojure/">clojure</a>
</li>
	<li class="cat-item cat-item-202008558"><a href="https://statcompute.wordpress.com/category/convolutional-neural-networks/">Convolutional Neural Networks</a>
</li>
	<li class="cat-item cat-item-65527"><a href="https://statcompute.wordpress.com/category/credit-risk/">Credit Risk</a>
</li>
	<li class="cat-item cat-item-1131271 current-cat"><a href="https://statcompute.wordpress.com/category/deep-learning/">Deep Learning</a>
</li>
	<li class="cat-item cat-item-105438"><a href="https://statcompute.wordpress.com/category/econometrics/">Econometrics</a>
</li>
	<li class="cat-item cat-item-15129357"><a href="https://statcompute.wordpress.com/category/incanter/">incanter</a>
</li>
	<li class="cat-item cat-item-32011"><a href="https://statcompute.wordpress.com/category/julia/">Julia</a>
</li>
	<li class="cat-item cat-item-1772715"><a href="https://statcompute.wordpress.com/category/keras/">Keras</a>
</li>
	<li class="cat-item cat-item-30659216"><a href="https://statcompute.wordpress.com/category/loss-forecasting/">Loss Forecasting</a>
</li>
	<li class="cat-item cat-item-21517"><a href="https://statcompute.wordpress.com/category/lua/">Lua</a>
</li>
	<li class="cat-item cat-item-40978"><a href="https://statcompute.wordpress.com/category/machine-learning/">Machine Learning</a>
</li>
	<li class="cat-item cat-item-241580"><a href="https://statcompute.wordpress.com/category/matlaboctave/">Matlab/Octave</a>
</li>
	<li class="cat-item cat-item-32629"><a href="https://statcompute.wordpress.com/category/pandas/">pandas</a>
</li>
	<li class="cat-item cat-item-164433"><a href="https://statcompute.wordpress.com/category/parallelism/">Parallelism</a>
</li>
	<li class="cat-item cat-item-633973"><a href="https://statcompute.wordpress.com/category/pig-latin/">Pig Latin</a>
</li>
	<li class="cat-item cat-item-832"><a href="https://statcompute.wordpress.com/category/python/">PYTHON</a>
</li>
	<li class="cat-item cat-item-59023"><a href="https://statcompute.wordpress.com/category/sr/">S+/R</a>
</li>
	<li class="cat-item cat-item-22267"><a href="https://statcompute.wordpress.com/category/sas/">SAS</a>
</li>
	<li class="cat-item cat-item-562795"><a href="https://statcompute.wordpress.com/category/scorecard/">Scorecard</a>
</li>
	<li class="cat-item cat-item-10346"><a href="https://statcompute.wordpress.com/category/sql/">SQL</a>
</li>
	<li class="cat-item cat-item-142835"><a href="https://statcompute.wordpress.com/category/sqlite/">SQLite</a>
</li>
	<li class="cat-item cat-item-11283368"><a href="https://statcompute.wordpress.com/category/statistical-models/">Statistical Models</a>
</li>
	<li class="cat-item cat-item-5849"><a href="https://statcompute.wordpress.com/category/statistics/">Statistics</a>
</li>
	<li class="cat-item cat-item-1159441"><a href="https://statcompute.wordpress.com/category/time-series/">Time Series</a>
</li>
</ul>

<h3>Meta</h3>
<ul>
    <li></li>
    <li><a href="https://statcompute.wordpress.com/wp-login.php">Log in</a></li>
    <li><a href="feed:https://statcompute.wordpress.com/feed/" title="Syndicate this site using RSS">Site Feed</a></li>
    <li><a href="feed:https://statcompute.wordpress.com/comments/feed/" title="The latest comments to all posts in RSS">Comments Feed</a></li>
    <li><a href="https://statcompute.wordpress.com/category/deep-learning/#content" title="Back to top">Back to top</a></li>
    </ul>


</div>

</div>

<div id="footer">
	<p><a href="https://wordpress.com/?ref=footer_blog">Blog at WordPress.com.</a> </p>
</div>
<!--  -->
	<div style="display:none">
	</div>
<script type="text/javascript" src="./Deep Learning _ Yet Another Blog in Statistical Computing_files/saved_resource(4)"></script>
<script type="text/javascript">
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://s0.wp.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "https://s0.wp.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?m=1363304414h&amp;ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

// Infinite scroll support
jQuery( function( $ ) {
	$( document.body ).on( 'post-load', function() {
		SyntaxHighlighter.highlight();
	} );
} );
</script>
<script type="text/javascript">
/* <![CDATA[ */
var actionbardata = {"siteID":"961631","siteName":"Yet Another Blog in Statistical Computing","siteURL":"http:\/\/statcompute.wordpress.com","icon":"<img alt='' src='https:\/\/secure.gravatar.com\/blavatar\/85708d077608b826887ea81e9621d635?s=50&d=https%3A%2F%2Fs1.wp.com%2Fi%2Flogo%2Fwpcom-gray-white.png' class='avatar avatar-50' height='50' width='50' \/>","canManageOptions":"","canCustomizeSite":"","isFollowing":"","themeSlug":"pub\/journalist","signupURL":"https:\/\/wordpress.com\/start\/","loginURL":"https:\/\/statcompute.wordpress.com\/wp-login.php?redirect_to=https%3A%2F%2Fstatcompute.wordpress.com%2F2017%2F04%2F10%2Frandom-search-for-optimal-parameters%2F","themeURL":"","xhrURL":"https:\/\/statcompute.wordpress.com\/wp-admin\/admin-ajax.php","nonce":"bae4e94e82","isSingular":"","isFolded":"","isLoggedIn":"","isMobile":"","subscribeNonce":"<input type=\"hidden\" id=\"_wpnonce\" name=\"_wpnonce\" value=\"0e2a983aae\" \/>","referer":"https:\/\/statcompute.wordpress.com\/category\/deep-learning\/","canFollow":"1","statusMessage":"","customizeLink":"https:\/\/statcompute.wordpress.com\/wp-admin\/customize.php?url=https%3A%2F%2Fstatcompute.wordpress.com%2Fcategory%2Fdeep-learning%2F","i18n":{"view":"View site","follow":"Follow","following":"Following","edit":"Edit","login":"Log in","signup":"Sign up","customize":"Customize","report":"Report this content","themeInfo":"Get theme: The Journalist v1.9","shortlink":"Copy shortlink","copied":"Copied","followedText":"New posts from this site will now appear in your <a href=\"https:\/\/wordpress.com\/\">Reader<\/a>","foldBar":"Collapse this bar","unfoldBar":"Expand this bar","editSubs":"Manage subscriptions","viewReader":"View site in the Reader","subscribe":"Sign me up","enterEmail":"Enter your email address","followers":"Join 138 other followers","alreadyUser":"Already have a WordPress.com account? <a href=\"https:\/\/statcompute.wordpress.com\/wp-login.php?redirect_to=https%3A%2F%2Fstatcompute.wordpress.com%2F2017%2F04%2F10%2Frandom-search-for-optimal-parameters%2F\">Log in now.<\/a>","stats":"Stats"}};
/* ]]> */
</script>
<script type="text/javascript" src="./Deep Learning _ Yet Another Blog in Statistical Computing_files/saved_resource(5)"></script><div id="actionbar" class="actnbr-pub-journalist actnbr-has-follow"><ul><li class="actnbr-btn actnbr-hidden"> 			    	<a class="actnbr-action actnbr-actn-follow" href="https://statcompute.wordpress.com/category/deep-learning/"><svg class="gridicon gridicon__follow" height="24px" width="24px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g><path d="M23 16v2h-3v3h-2v-3h-3v-2h3v-3h2v3h3zM20 2v9h-4v3h-3v4H4c-1.1 0-2-.9-2-2V2h18zM8 13v-1H4v1h4zm3-3H4v1h7v-1zm0-2H4v1h7V8zm7-4H4v2h14V4z"></path></g></svg><span>Follow</span></a> 			    	<div class="actnbr-popover tip tip-top-left actnbr-notice"> 			    		<div class="tip-arrow"></div> 			    		<div class="tip-inner actnbr-follow-bubble"></div> 			    	</div> 			    </li><li class="actnbr-ellipsis actnbr-hidden"> 			  <svg class="gridicon gridicon__ellipsis" height="24" width="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g><circle cx="5" cy="12" r="2"></circle><circle cx="19" cy="12" r="2"></circle><circle cx="12" cy="12" r="2"></circle></g></svg> 			  <div class="actnbr-popover tip tip-top-left actnbr-more"> 			  	<div class="tip-arrow"></div> 			  	<div class="tip-inner"> 				  <ul> 				    <li class="actnbr-sitename actnbr-hidden"><a href="http://statcompute.wordpress.com/"><img alt="" src="./Deep Learning _ Yet Another Blog in Statistical Computing_files/85708d077608b826887ea81e9621d635" class="avatar avatar-50" height="50" width="50" originals="50" scale="2"> Yet Another Blog in Statistical Computing</a></li> 				   	<li class="actnbr-folded-customize actnbr-hidden"><a href="https://statcompute.wordpress.com/wp-admin/customize.php?url=https%3A%2F%2Fstatcompute.wordpress.com%2Fcategory%2Fdeep-learning%2F"><svg class="gridicon gridicon__customize" height="20px" width="20px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g><path d="M2 6c0-1.505.78-3.08 2-4 0 .845.69 2 2 2 1.657 0 3 1.343 3 3 0 .386-.08.752-.212 1.09.74.594 1.476 1.19 2.19 1.81L8.9 11.98c-.62-.716-1.214-1.454-1.807-2.192C6.753 9.92 6.387 10 6 10c-2.21 0-4-1.79-4-4zm12.152 6.848l1.34-1.34c.607.304 1.283.492 2.008.492 2.485 0 4.5-2.015 4.5-4.5 0-.725-.188-1.4-.493-2.007L18 9l-2-2 3.507-3.507C18.9 3.188 18.225 3 17.5 3 15.015 3 13 5.015 13 7.5c0 .725.188 1.4.493 2.007L3 20l2 2 6.848-6.848c1.885 1.928 3.874 3.753 5.977 5.45l1.425 1.148 1.5-1.5-1.15-1.425c-1.695-2.103-3.52-4.092-5.448-5.977z" data-reactid=".2.1.1:0.1b.0"></path></g></svg><span>Customize<span></span></span></a></li> 				    <li class="actnbr-folded-follow actnbr-hidden"><a class="actnbr-action actnbr-actn-follow" href="https://statcompute.wordpress.com/category/deep-learning/"><svg class="gridicon gridicon__follow" height="24px" width="24px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g><path d="M23 16v2h-3v3h-2v-3h-3v-2h3v-3h2v3h3zM20 2v9h-4v3h-3v4H4c-1.1 0-2-.9-2-2V2h18zM8 13v-1H4v1h4zm3-3H4v1h7v-1zm0-2H4v1h7V8zm7-4H4v2h14V4z"></path></g></svg><span>Follow</span></a></li> 					<li class="actnbr-signup actnbr-hidden"><a href="https://wordpress.com/start/">Sign up</a></li> 				    <li class="actnbr-login actnbr-hidden"><a href="https://statcompute.wordpress.com/wp-login.php?redirect_to=https%3A%2F%2Fstatcompute.wordpress.com%2F2017%2F04%2F10%2Frandom-search-for-optimal-parameters%2F">Log in</a></li> 				     				     				    <li class="flb-report actnbr-hidden"><a href="http://en.wordpress.com/abuse/">Report this content</a></li> 				     				     				    <li class="actnbr-subs actnbr-hidden"><a href="https://subscribe.wordpress.com/">Manage subscriptions</a></li> 				    <li class="actnbr-fold actnbr-hidden"><a href="https://statcompute.wordpress.com/category/deep-learning/">Collapse this bar</a></li> 			      </ul> 			    </div> 		      </div> 		    </li> 	      </ul></div>
<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script>		<script>
			var _comscore = _comscore || [];
			_comscore.push({
				c1: "2",
				c2: "7518284"
			});
			(function() {
				var s = document.createElement("script"),
					el = document.getElementsByTagName("script")[0];
				s.defer = true;
				s.src = (document.location.protocol == "https:" ? "https://sb" : "http://b") + ".scorecardresearch.com/beacon.js";
				el.parentNode.insertBefore(s, el);
			})();
		</script>
		<noscript>
			&lt;p class="robots-nocontent"&gt;&lt;img src="https://sb.scorecardresearch.com/p?c1=2&amp;c2=7518284&amp;c3=&amp;c4=&amp;c5=&amp;c6=&amp;c15=&amp;cv=2.0&amp;cj=1" alt="" style="display:none;" width="1" height="1" /&gt;&lt;/p&gt;
		</noscript><script src="./Deep Learning _ Yet Another Blog in Statistical Computing_files/w.js" type="text/javascript" async="" defer=""></script>
<script type="text/javascript">
_tkq = window._tkq || [];
_stq = window._stq || [];
_tkq.push(['storeContext', {'blog_id':'961631','blog_tz':'-4','user_lang':'en','blog_lang':'en','user_id':'0'}]);
_stq.push(['view', {'blog':'961631','v':'wpcom','tz':'-4','user_id':'0','subd':'statcompute'}]);
_stq.push(['extra', {'crypt':'UE40eW5QN0p8M2Y/RE1LVmwrVi5vQS5fVFtfdHBbPyw1VXIrU3hWLHhzVndTdktBX0ddJnpXRjVaOTd6fj1YMX4ydzR6MmRCYnxkNmdJdV9ubHF6aS1wYzhLNS9lSHNGOE1IJlAreC4xfCxpJXRsZkxjZnV4RkFOUj1IZjVfaD9uenlXamMmOHYwSTVPLkJNWm8sczZYLHpJPy89bEZHTlEtaUNNP0w3ZERMZGVIR1pPVStqZVBpYjJBU3ZGNDRmRkprZnMsLjAlbEFSVj9ELFFtWj09cjFaMmp8SlJbfnV+aW0/TVdlR3d6fnlkLUEyR1ddP1U='}]);
_stq.push([ 'clickTrackerInit', '961631', '0' ]);
	</script>
<noscript>&lt;img src="https://pixel.wp.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="" /&gt;</noscript>
<script>
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//pixel.wp.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&baba=' + Math.random();
	}
	
}
</script>

<img src="./Deep Learning _ Yet Another Blog in Statistical Computing_files/g.gif" alt=":)" id="wpstats" scale="0"></body></html>