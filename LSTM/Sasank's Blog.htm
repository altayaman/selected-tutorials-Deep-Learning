<!DOCTYPE html>
<!-- saved from url=(0032)http://chsasank.github.io/page2/ -->
<html ⚡="" lang="en" amp-version="1492571781980" class="i-amphtml-singledoc i-amphtml-standalone" style="padding-top: 0px;"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><style amp-runtime="">html{overflow-x:hidden!important}body,html{height:auto!important}body{margin:0!important;-webkit-text-size-adjust:100%;-moz-text-size-adjust:100%;-ms-text-size-adjust:100%;text-size-adjust:100%}[hidden]{display:none!important}html.i-amphtml-singledoc.i-amphtml-embedded{-ms-touch-action:pan-y;touch-action:pan-y}html.i-amphtml-singledoc>body{overflow:visible!important;position:relative!important}html.i-amphtml-webview>body{overflow-x:hidden!important;overflow-y:visible!important}html.i-amphtml-ios-embed{position:static}#i-amphtml-wrapper,html.i-amphtml-ios-embed{overflow-y:auto!important;-webkit-overflow-scrolling:touch!important}#i-amphtml-wrapper{overflow-x:hidden!important;position:absolute!important;top:0!important;left:0!important;right:0!important;bottom:0!important;margin:0!important;display:block!important}#i-amphtml-wrapper>body{position:relative!important;border-top:1px solid transparent!important}.i-amphtml-element{display:inline-block}.i-amphtml-layout-fixed{display:inline-block;position:relative}.i-amphtml-layout-container,.i-amphtml-layout-fixed-height,.i-amphtml-layout-responsive{display:block;position:relative}.i-amphtml-layout-fill{display:block;overflow:hidden!important;position:absolute;top:0;left:0;bottom:0;right:0}.i-amphtml-layout-flex-item{display:block;position:relative;-webkit-box-flex:1;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto}.i-amphtml-layout-size-defined{overflow:hidden!important}.i-amphtml-layout-awaiting-size{position:absolute!important;top:auto!important;bottom:auto!important}i-amphtml-sizer{display:block!important}.i-amphtml-fill-content{display:block;width:1px;min-width:100%;height:1px;min-height:100%;margin:auto}.i-amphtml-layout-size-defined .i-amphtml-fill-content{position:absolute;top:0;left:0;bottom:0;right:0}.i-amphtml-replaced-content,.i-amphtml-screen-reader{padding:0!important;border:none!important}.i-amphtml-screen-reader{position:fixed!important;top:0px!important;left:0px!important;width:2px!important;height:2px!important;opacity:0!important;overflow:hidden!important;margin:0!important;display:block!important;visibility:visible!important}.i-amphtml-unresolved{position:relative;overflow:hidden!important}#i-amphtml-wrapper.i-amphtml-scroll-disabled,.i-amphtml-scroll-disabled{overflow-x:hidden!important;overflow-y:hidden!important}.i-amphtml-notbuilt{position:relative;overflow:hidden!important;color:transparent!important}.i-amphtml-notbuilt>*{display:none}.i-amphtml-ghost{visibility:hidden!important}.i-amphtml-element>[placeholder]{display:block}.i-amphtml-element>[placeholder].amp-hidden,.i-amphtml-element>[placeholder].hidden{visibility:hidden}.i-amphtml-element:not(.amp-notsupported)>[fallback]{display:none}.i-amphtml-layout-size-defined>[fallback],.i-amphtml-layout-size-defined>[placeholder]{position:absolute!important;top:0!important;left:0!important;right:0!important;bottom:0!important;z-index:1!important}.i-amphtml-notbuilt>[placeholder]{display:block!important}.i-amphtml-hidden-by-media-query{display:none}.i-amphtml-element-error{background:red!important;color:#fff!important;position:relative!important}.i-amphtml-element-error:before{content:attr(error-message)}i-amp-scroll-container,i-amphtml-scroll-container{position:absolute;top:0;left:0;right:0;bottom:0;display:block}i-amp-scroll-container.amp-active,i-amphtml-scroll-container.amp-active{overflow:auto;-webkit-overflow-scrolling:touch}.i-amphtml-loading-container{display:block!important;z-index:1}.i-amphtml-notbuilt>.i-amphtml-loading-container{display:block!important}.i-amphtml-loading-container.amp-hidden{visibility:hidden}.i-amphtml-loader-line{position:absolute;top:0;left:0;right:0;height:1px;overflow:hidden!important;background-color:hsla(0,0%,59%,.2);display:block}.i-amphtml-loader-moving-line{display:block;position:absolute;width:100%;height:100%!important;background-color:rgba(0,0,0,.5);z-index:2}.i-amphtml-loader-moving-line[experiment]{background-color:hsla(0,0%,59%,.65)}@-webkit-keyframes i-amphtml-loader-line-moving{0%{-webkit-transform:translateX(-100%);transform:translateX(-100%)}to{-webkit-transform:translateX(100%);transform:translateX(100%)}}@keyframes i-amphtml-loader-line-moving{0%{-webkit-transform:translateX(-100%);transform:translateX(-100%)}to{-webkit-transform:translateX(100%);transform:translateX(100%)}}.i-amphtml-loader-line.amp-active .i-amphtml-loader-moving-line{-webkit-animation:i-amphtml-loader-line-moving 2s ease infinite;animation:i-amphtml-loader-line-moving 2s ease infinite}.i-amphtml-loader{position:absolute;display:block;height:10px;top:50%;left:50%;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);-webkit-transform-origin:50% 50%;transform-origin:50% 50%;white-space:nowrap}.i-amphtml-loader.amp-active .i-amphtml-loader-dot{-webkit-animation:i-amphtml-loader-dots 2s infinite;animation:i-amphtml-loader-dots 2s infinite}.i-amphtml-loader-dot{position:relative;display:inline-block;height:10px;width:10px;margin:2px;border-radius:100%;background-color:rgba(0,0,0,.3);box-shadow:2px 2px 2px 1px rgba(0,0,0,.2);will-change:transform}.i-amphtml-loader .i-amphtml-loader-dot:first-child{-webkit-animation-delay:0s;animation-delay:0s}.i-amphtml-loader .i-amphtml-loader-dot:nth-child(2){-webkit-animation-delay:.1s;animation-delay:.1s}.i-amphtml-loader .i-amphtml-loader-dot:nth-child(3){-webkit-animation-delay:.2s;animation-delay:.2s}@-webkit-keyframes i-amphtml-loader-dots{0%,to{-webkit-transform:scale(.7);transform:scale(.7);background-color:rgba(0,0,0,.3)}50%{-webkit-transform:scale(.8);transform:scale(.8);background-color:rgba(0,0,0,.5)}}@keyframes i-amphtml-loader-dots{0%,to{-webkit-transform:scale(.7);transform:scale(.7);background-color:rgba(0,0,0,.3)}50%{-webkit-transform:scale(.8);transform:scale(.8);background-color:rgba(0,0,0,.5)}}.i-amphtml-element>[overflow]{cursor:pointer;position:relative;z-index:2;visibility:hidden}.i-amphtml-element>[overflow].amp-visible{visibility:visible}template{display:none!important}.amp-border-box,.amp-border-box *,.amp-border-box :after,.amp-border-box :before{box-sizing:border-box}amp-pixel{display:none!important}amp-instagram{padding:64px 0px 0px!important;background-color:#fff}amp-analytics{position:fixed!important;top:0!important;width:1px!important;height:1px!important;overflow:hidden!important;visibility:hidden}amp-iframe iframe{box-sizing:border-box!important}[amp-access][amp-access-hide],amp-experiment,amp-live-list>[update],amp-share-tracking,form [submit-error],form [submit-success]{display:none}amp-fresh{visibility:hidden}.i-amphtml-jank-meter{position:fixed;background-color:rgba(232,72,95,.5);bottom:0;right:0;color:#fff;font-size:16px;width:110px;z-index:1000;padding:5px}i-amp-video-mask,i-amphtml-video-mask{z-index:1}.amp-video-eq{-webkit-box-align:end;-webkit-align-items:flex-end;-ms-flex-align:end;align-items:flex-end;bottom:7px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:12px;opacity:0.8;overflow:hidden;position:absolute;right:7px;width:20px;z-index:1}.amp-video-eq .amp-video-eq-col{-webkit-box-flex:1;-webkit-flex:1;-ms-flex:1;flex:1;height:100%;margin-right:1px;position:relative}.amp-video-eq .amp-video-eq-col div{-webkit-animation-name:amp-video-eq-animation;animation-name:amp-video-eq-animation;-webkit-animation-timing-function:linear;animation-timing-function:linear;-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite;-webkit-animation-direction:alternate;animation-direction:alternate;background-color:#fafafa;height:100%;position:absolute;width:100%;will-change:transform;-webkit-animation-play-state:paused;animation-play-state:paused}.amp-video-eq[unpausable] .amp-video-eq-col div{-webkit-animation-name:none;animation-name:none}.amp-video-eq[unpausable].amp-video-eq-play .amp-video-eq-col div{-webkit-animation-name:amp-video-eq-animation;animation-name:amp-video-eq-animation}.amp-video-eq.amp-video-eq-play .amp-video-eq-col div{-webkit-animation-play-state:running;animation-play-state:running}.amp-video-eq-1-1{-webkit-animation-duration:0.3s;animation-duration:0.3s}.amp-video-eq-1-1,.amp-video-eq-1-2{-webkit-transform:translateY(60%);transform:translateY(60%)}.amp-video-eq-1-2{-webkit-animation-duration:0.45s;animation-duration:0.45s}.amp-video-eq-2-1{-webkit-animation-duration:0.5s;animation-duration:0.5s}.amp-video-eq-2-1,.amp-video-eq-2-2{-webkit-transform:translateY(30%);transform:translateY(30%)}.amp-video-eq-2-2{-webkit-animation-duration:0.4s;animation-duration:0.4s}.amp-video-eq-3-1{-webkit-animation-duration:0.3s;animation-duration:0.3s}.amp-video-eq-3-1,.amp-video-eq-3-2{-webkit-transform:translateY(70%);transform:translateY(70%)}.amp-video-eq-3-2{-webkit-animation-duration:0.35s;animation-duration:0.35s}.amp-video-eq-4-1{-webkit-animation-duration:0.4s;animation-duration:0.4s}.amp-video-eq-4-1,.amp-video-eq-4-2{-webkit-transform:translateY(50%);transform:translateY(50%)}.amp-video-eq-4-2{-webkit-animation-duration:0.25s;animation-duration:0.25s}@-webkit-keyframes amp-video-eq-animation{0%{-webkit-transform:translateY(100%);transform:translateY(100%)}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes amp-video-eq-animation{0%{-webkit-transform:translateY(100%);transform:translateY(100%)}to{-webkit-transform:translateY(0);transform:translateY(0)}}
/*# sourceURL=/css/amp.css*/</style>
  <script async="" src="./Sasank&#39;s Blog_files/analytics.js"></script><script async="" custom-element="amp-youtube" src="./Sasank&#39;s Blog_files/amp-youtube-0.1.js"></script>
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width,minimum-scale=1">

  <title>Sasank's Blog</title>
  <meta name="description" content="Code. Books. Languages.
">

  <link rel="canonical" href="http://page2/">
  <link rel="alternate" type="application/rss+xml" title="Sasank&#39;s Blog" href="http://feed.xml/">

  <script type="application/ld+json">
  
{
  "@context": "http://schema.org",
  "@type": "NewsArticle",
  "mainEntityOfPage": "//page2/",
  "headline": "Sasank&#39;s Blog",
  "datePublished": "2017-02-01T22:13:13+00:00",
  "dateModified": "2017-02-01T22:13:13+00:00",
  "description": "Code. Books. Languages.
",
  "author": {
    "@type": "Person",
    "name": "Sasank Chilamkurthy"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Sasank's Blog",
    "logo": {
      "@type": "ImageObject",
      "url": "/",
      "width": 60,
      "height": 60
    }
  },
  "image": {
    "@type": "ImageObject",
    "url": "/",
    "height": 60,
    "width": 60
  }
}

  </script>

  <style amp-custom="">
  
  /* Import ET Book styles adapted from https://github.com/edwardtufte/et-book/blob/gh-pages/et-book.css */
@font-face { font-family: "et-book"; src: url("/assets/et-book/et-book-roman-line-figures/et-book-roman-line-figures.eot"); src: url("/assets/et-book/et-book-roman-line-figures/et-book-roman-line-figures.eot?#iefix") format("embedded-opentype"), url("/assets/et-book/et-book-roman-line-figures/et-book-roman-line-figures.woff") format("woff"), url("/assets/et-book/et-book-roman-line-figures/et-book-roman-line-figures.ttf") format("truetype"), url("/assets/et-book/et-book-roman-line-figures/et-book-roman-line-figures.svg#etbookromanosf") format("svg"); font-weight: normal; font-style: normal; }
@font-face { font-family: "et-book"; src: url("/assets/et-book/et-book-display-italic-old-style-figures/et-book-display-italic-old-style-figures.eot"); src: url("/assets/et-book/et-book-display-italic-old-style-figures/et-book-display-italic-old-style-figures.eot?#iefix") format("embedded-opentype"), url("/assets/et-book/et-book-display-italic-old-style-figures/et-book-display-italic-old-style-figures.woff") format("woff"), url("/assets/et-book/et-book-display-italic-old-style-figures/et-book-display-italic-old-style-figures.ttf") format("truetype"), url("/assets/et-book/et-book-display-italic-old-style-figures/et-book-display-italic-old-style-figures.svg#etbookromanosf") format("svg"); font-weight: normal; font-style: italic; }
@font-face { font-family: "et-book"; src: url("/assets/et-book/et-book-bold-line-figures/et-book-bold-line-figures.eot"); src: url("/assets/et-book/et-book-bold-line-figures/et-book-bold-line-figures.eot?#iefix") format("embedded-opentype"), url("/assets/et-book/et-book-bold-line-figures/et-book-bold-line-figures.woff") format("woff"), url("/assets/et-book/et-book-bold-line-figures/et-book-bold-line-figures.ttf") format("truetype"), url("/assets/et-book/et-book-bold-line-figures/et-book-bold-line-figures.svg#etbookromanosf") format("svg"); font-weight: bold; font-style: normal; }
@font-face { font-family: "et-book-roman-old-style"; src: url("/assets/et-book/et-book-roman-old-style-figures/et-book-roman-old-style-figures.eot"); src: url("/assets/et-book/et-book-roman-old-style-figures/et-book-roman-old-style-figures.eot?#iefix") format("embedded-opentype"), url("/assets/et-book/et-book-roman-old-style-figures/et-book-roman-old-style-figures.woff") format("woff"), url("/assets/et-book/et-book-roman-old-style-figures/et-book-roman-old-style-figures.ttf") format("truetype"), url("/assets/et-book/et-book-roman-old-style-figures/et-book-roman-old-style-figures.svg#etbookromanosf") format("svg"); font-weight: normal; font-style: normal; }
/* Tufte CSS styles */
html { font-size: 15px; }

body { width: 87.5%; margin-left: auto; margin-right: auto; padding-left: 12.5%; font-family: et-book, Palatino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, serif; background-color: #fffff8; color: #111; max-width: 1400px; counter-reset: sidenote-counter; }

h1 { font-weight: 400; margin-top: 4rem; margin-bottom: 1.5rem; font-size: 3.2rem; line-height: 1; }

h2 { font-style: italic; font-weight: 400; margin-top: 2.1rem; margin-bottom: 0; font-size: 2.2rem; line-height: 1; }

h3 { font-style: italic; font-weight: 400; font-size: 1.7rem; margin-top: 2rem; margin-bottom: 0; line-height: 1; }

p.subtitle { font-style: italic; margin-top: 1rem; margin-bottom: 1rem; font-size: 1.8rem; display: block; line-height: 1; }

.numeral { font-family: et-book-roman-old-style; }

.danger { color: red; }

article { position: relative; padding: 5rem 0rem; }

section { padding-top: 1rem; padding-bottom: 1rem; }

td, th { padding: 7px 3px 6px; border-collapse: collapse; border-bottom: 2px solid #eee; }

th { font-weight: bold; padding-bottom: 4px; letter-spacing: 1px; border-bottom-width: 3px; }

.MathJax_Display { font-size: 1.4rem; }

p, ol, ul, .pagination a, .pagination em, table { font-size: 1.4rem; }

p { line-height: 2rem; margin-top: 1.4rem; margin-bottom: 1.4rem; padding-right: 0; vertical-align: baseline; }

/* Chapter Epigraphs */
div.epigraph { margin: 5em 0; }

div.epigraph > blockquote { margin-top: 3em; margin-bottom: 3em; }

div.epigraph > blockquote, div.epigraph > blockquote > p { font-style: italic; }

div.epigraph > blockquote > footer { font-style: normal; }

div.epigraph > blockquote > footer > cite { font-style: italic; }

/* end chapter epigraphs styles */
blockquote { font-size: 1.4rem; }

blockquote p { width: 50%; }

blockquote .footer { width: 50%; font-size: 1.1rem; text-align: right; }

ol, ul { width: 45%; -webkit-padding-start: 5%; -webkit-padding-end: 5%; }

li { padding: 0.5rem 0; }

figure { padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; max-width: 55%; -webkit-margin-start: 0; -webkit-margin-end: 0; margin: 0 0 3em 0; }

figcaption { float: right; clear: right; margin-right: -48%; margin-top: 0; margin-bottom: 0; font-size: 1.1rem; line-height: 1.6; vertical-align: baseline; position: relative; max-width: 40%; }

figure.fullwidth figcaption { margin-right: 24%; }

/* Links: replicate underline that clears descenders */
a:link, a:visited { color: inherit; }

a:link { text-decoration: none; background: -webkit-linear-gradient(#fffff8, #fffff8), -webkit-linear-gradient(#fffff8, #fffff8), -webkit-linear-gradient(#333, #333); background: linear-gradient(#fffff8, #fffff8), linear-gradient(#fffff8, #fffff8), linear-gradient(#333, #333); -webkit-background-size: 0.05em 1px, 0.05em 1px, 1px 1px; -moz-background-size: 0.05em 1px, 0.05em 1px, 1px 1px; background-size: 0.05em 1px, 0.05em 1px, 1px 1px; background-repeat: no-repeat, no-repeat, repeat-x; text-shadow: 0.03em 0 #fffff8, -0.03em 0 #fffff8, 0 0.03em #fffff8, 0 -0.03em #fffff8, 0.06em 0 #fffff8, -0.06em 0 #fffff8, 0.09em 0 #fffff8, -0.09em 0 #fffff8, 0.12em 0 #fffff8, -0.12em 0 #fffff8, 0.15em 0 #fffff8, -0.15em 0 #fffff8; background-position: 0% 93%, 100% 93%, 0% 93%; }

@media screen and (-webkit-min-device-pixel-ratio: 0) { a:link { background-position-y: 87%, 87%, 87%; } }
a:link::selection { text-shadow: 0.03em 0 #b4d5fe, -0.03em 0 #b4d5fe, 0 0.03em #b4d5fe, 0 -0.03em #b4d5fe, 0.06em 0 #b4d5fe, -0.06em 0 #b4d5fe, 0.09em 0 #b4d5fe, -0.09em 0 #b4d5fe, 0.12em 0 #b4d5fe, -0.12em 0 #b4d5fe, 0.15em 0 #b4d5fe, -0.15em 0 #b4d5fe; background: #b4d5fe; }

a:link::-moz-selection { text-shadow: 0.03em 0 #b4d5fe, -0.03em 0 #b4d5fe, 0 0.03em #b4d5fe, 0 -0.03em #b4d5fe, 0.06em 0 #b4d5fe, -0.06em 0 #b4d5fe, 0.09em 0 #b4d5fe, -0.09em 0 #b4d5fe, 0.12em 0 #b4d5fe, -0.12em 0 #b4d5fe, 0.15em 0 #b4d5fe, -0.15em 0 #b4d5fe; background: #b4d5fe; }

/* Sidenotes, margin notes, figures, captions */
img { max-width: 100%; }

.sidenote, .marginnote { float: right; clear: right; margin-right: -60%; width: 50%; margin-top: 0; margin-bottom: 0; font-size: 1.1rem; line-height: 1.3; vertical-align: baseline; position: relative; }

.table-caption { float: right; clear: right; margin-right: -60%; width: 50%; margin-top: 0; margin-bottom: 0; font-size: 1.0rem; line-height: 1.6; }

.sidenote-number { counter-increment: sidenote-counter; }

.sidenote-number:after, .sidenote:before { content: counter(sidenote-counter) " "; font-family: et-book-roman-old-style; position: relative; vertical-align: baseline; }

.sidenote-number:after { content: counter(sidenote-counter); font-size: 1rem; top: -0.5rem; left: 0.1rem; }

.sidenote:before { content: counter(sidenote-counter) " "; top: -0.5rem; }

p, footer, table, div.table-wrapper-small, div.supertable-wrapper > p, div.booktabs-wrapper { width: 55%; }

div.fullwidth, table.fullwidth { width: 100%; }

div.table-wrapper { overflow-x: auto; font-family: "Trebuchet MS", "Gill Sans", "Gill Sans MT", sans-serif; }

@media screen and (max-width: 760px) { p, h1, h2, h3, footer { width: 90%; }
  pre.code { width: 87.5%; }
  ul { width: 85%; }
  figure { max-width: 90%; }
  figcaption, figure.fullwidth figcaption { margin-right: 0%; max-width: none; }
  blockquote p, blockquote .footer { width: 90%; } }
.sans { font-family: "Gill Sans", "Gill Sans MT", Calibri, sans-serif; letter-spacing: .03em; }

.code { font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace; font-size: 1.125rem; line-height: 1.6; }

h1 .code, h2 .code, h3 .code { font-size: 0.80em; }

.marginnote .code, .sidenote .code { font-size: 1rem; }

pre.code { width: 52.5%; padding-left: 2.5%; overflow-x: auto; }

.fullwidth { max-width: 90%; clear: both; }

span.newthought { font-variant: small-caps; font-size: 1.2em; }

.margin-toggle { display: none; }

.sidenote-number { display: inline; }

.margin-toggle:not(.sidenote-number) { display: none; }

@media (max-width: 760px) { .margin-toggle:not(.sidenote-number) { display: none; }
  .sidenote, .marginnote { display: none; }
  .margin-toggle:checked + .sidenote, .margin-toggle:checked + .marginnote { display: block; float: left; left: 1rem; clear: both; width: 95%; margin: 1rem 2.5%; vertical-align: baseline; position: relative; }
  label { cursor: pointer; }
  pre.code { width: 90%; padding: 0; }
  .table-caption { display: block; float: right; clear: both; width: 98%; margin-top: 1rem; margin-bottom: 0.5rem; margin-left: 1%; margin-right: 1%; vertical-align: baseline; position: relative; }
  div.table-wrapper, table, table.booktabs { width: 85%; }
  div.table-wrapper { border-right: 1px solid #efefef; }
  img { width: 100%; } }
/** Syntax highlighting styles */
.highlight .c { color: #998; font-style: italic; }
.highlight .err { color: #a61717; background-color: #e3d2d2; }
.highlight .k { font-weight: bold; }
.highlight .o { font-weight: bold; }
.highlight .cm { color: #998; font-style: italic; }
.highlight .cp { color: #999; }
.highlight .c1 { color: #998; font-style: italic; }
.highlight .cs { color: #999; font-weight: bold; font-style: italic; }
.highlight .gd { color: #000; background-color: #fdd; }
.highlight .gd .x { color: #000; background-color: #faa; }
.highlight .ge { font-style: italic; }
.highlight .gr { color: #a00; }
.highlight .gh { color: #999; }
.highlight .gi { color: #000; background-color: #dfd; }
.highlight .gi .x { color: #000; background-color: #afa; }
.highlight .go { color: #888; }
.highlight .gp { color: #555; }
.highlight .gs { font-weight: bold; }
.highlight .gu { color: #aaa; }
.highlight .gt { color: #a00; }
.highlight .kc { font-weight: bold; }
.highlight .kd { font-weight: bold; }
.highlight .kp { font-weight: bold; }
.highlight .kr { font-weight: bold; }
.highlight .kt { color: #458; font-weight: bold; }
.highlight .m { color: #099; }
.highlight .s { color: #d14; }
.highlight .na { color: #008080; }
.highlight .nb { color: #0086B3; }
.highlight .nc { color: #458; font-weight: bold; }
.highlight .no { color: #008080; }
.highlight .ni { color: #800080; }
.highlight .ne { color: #900; font-weight: bold; }
.highlight .nf { color: #900; font-weight: bold; }
.highlight .nn { color: #555; }
.highlight .nt { color: #000080; }
.highlight .nv { color: #008080; }
.highlight .ow { font-weight: bold; }
.highlight .w { color: #bbb; }
.highlight .mf { color: #099; }
.highlight .mh { color: #099; }
.highlight .mi { color: #099; }
.highlight .mo { color: #099; }
.highlight .sb { color: #d14; }
.highlight .sc { color: #d14; }
.highlight .sd { color: #d14; }
.highlight .s2 { color: #d14; }
.highlight .se { color: #d14; }
.highlight .sh { color: #d14; }
.highlight .si { color: #d14; }
.highlight .sx { color: #d14; }
.highlight .sr { color: #009926; }
.highlight .s1 { color: #d14; }
.highlight .ss { color: #990073; }
.highlight .bp { color: #999; }
.highlight .vc { color: #008080; }
.highlight .vg { color: #008080; }
.highlight .vi { color: #008080; }
.highlight .il { color: #099; }

main { margin-top: 20px; }

amp-img { background-color: grey; }

article { padding: 2.5rem 0; }

header { margin-top: 20px; }

.post-meta { margin-top: 10px; }

pre { width: 52.5%; padding-left: 2.5%; overflow-x: auto; background-color: #fefef9; }

@media (max-width: 760px) { pre { width: 90%; padding: 0; } }
code { font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace; font-size: 1.125rem; line-height: 1.6; }

.marginnote code { font-size: 1rem; }

.sidenote code { font-size: 1rem; }

td { text-align: center; vertical-align: middle; }

  </style>



  <style amp-boilerplate="">body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style><noscript>&lt;style amp-boilerplate&gt;body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}&lt;/style&gt;</noscript>

  <script async="" src="./Sasank&#39;s Blog_files/v0.js"></script>
<style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><style type="text/css">.MathJax_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}
.MathJax .merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MathJax .MJX-monospace {font-family: monospace}
.MathJax .MJX-sans-serif {font-family: sans-serif}
#MathJax_Tooltip {background-color: InfoBackground; color: InfoText; border: 1px solid black; box-shadow: 2px 2px 5px #AAAAAA; -webkit-box-shadow: 2px 2px 5px #AAAAAA; -moz-box-shadow: 2px 2px 5px #AAAAAA; -khtml-box-shadow: 2px 2px 5px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true'); padding: 3px 4px; z-index: 401; position: absolute; left: 0; top: 0; width: auto; height: auto; display: none}
.MathJax {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}
.MathJax:focus, body :focus .MathJax {display: inline-table}
.MathJax.MathJax_FullWidth {text-align: center; display: table-cell!important; width: 10000em!important}
.MathJax img, .MathJax nobr, .MathJax a {border: 0; padding: 0; margin: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; vertical-align: 0; line-height: normal; text-decoration: none}
img.MathJax_strut {border: 0!important; padding: 0!important; margin: 0!important; vertical-align: 0!important}
.MathJax span {display: inline; position: static; border: 0; padding: 0; margin: 0; vertical-align: 0; line-height: normal; text-decoration: none}
.MathJax nobr {white-space: nowrap!important}
.MathJax img {display: inline!important; float: none!important}
.MathJax * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}
.MathJax_Processing {visibility: hidden; position: fixed; width: 0; height: 0; overflow: hidden}
.MathJax_Processed {display: none!important}
.MathJax_ExBox {display: block!important; overflow: hidden; width: 1px; height: 60ex; min-height: 0; max-height: none}
.MathJax .MathJax_EmBox {display: block!important; overflow: hidden; width: 1px; height: 60em; min-height: 0; max-height: none}
.MathJax_LineBox {display: table!important}
.MathJax_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}
.MathJax .MathJax_HitBox {cursor: text; background: white; opacity: 0; filter: alpha(opacity=0)}
.MathJax .MathJax_HitBox * {filter: none; opacity: 1; background: transparent}
#MathJax_Tooltip * {filter: none; opacity: 1; background: transparent}
@font-face {font-family: MathJax_Blank; src: url('about:blank')}
.MathJax .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>

  <body class="amp-mode-mouse amp-mode-keyboard-active" style="opacity: 1; visibility: visible; animation: none;"><div style="visibility: hidden; overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal;"><div id="MathJax_Hidden"></div></div><div id="MathJax_Message" style="display: none;"></div>
    <header>
  <div class="page-links">
    <a class="page-link" href="http://chsasank.github.io/">Home</a>
    
      
      • <a class="page-link" href="http://chsasank.github.io/about/">About</a>
      
    
      
      • <a class="page-link" href="http://chsasank.github.io/archive/">Archive</a>
      
    
      
      • <a class="page-link" href="http://chsasank.github.io/contact/">Contact</a>
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
  </div>
</header>


    <main>

  <section>
      <h1>Sasank's Blog</h1>
      <h3>Code. Books. Languages.
</h3>
  </section>

  <div>
    
      <article itemscope="" itemtype="http://schema.org/BlogPosting" role="article">

          <header>
            <h2 itemprop="name"><a href="http://chsasank.github.io/spoken-language-understanding.html" itemprop="url">Keras Tutorial - Spoken Language Understanding</a></h2>
          </header>

          <div class="post-meta">
            <time datetime="05 January 2017">05 January 2017</time>
          </div>

          <section itemprop="description">
            <p>In previous tutorial, we have had a introduction to convolutional neural networks(CNNs) and keras deep learning framework. We have used them to solve a computer vision(CV) problem: traffic sign recognition. 
Today, we will solve a natural language processing (NLP) problem with keras.</p>

<h2 id="problem-and-the-dataset">Problem and the Dataset</h2>

<p>Problem we are going to tackle is <a href="https://en.wikipedia.org/wiki/Natural_language_understanding">Natural Language Understanding</a>. 
It aims to extract meanining of speech utterances. However, this is still an unsolved problem. 
Therefore, we break this problem into a solvable practical problem of understanding the speaker in a limited context. 
In particular, we want to identify the intent of a speaker asking for information about flights.</p>

<p>Dataset we are going to use is Airline Travel Information System (ATIS).
This dataset was collected by <a href="https://en.wikipedia.org/wiki/DARPA">DARPA</a> in the early 90s. ATIS consists of spoken queries on flight related information.
An example utterance is <em>I want to go from Boston to Atlanta on Monday</em>.
Understanding this is then reduced to identifying arguments like <em>Destination</em> and <em>Departure Day</em>. This task is called slot-filling.</p>

<p>Here is an example sentence and its labels
<span id="labels" class="margin-toggle sidenote-number"></span>
<span class="sidenote">You will observe that labels are encoded in <a href="https://en.wikipedia.org/wiki/Inside_Outside_Beginning">Inside Outside Beginning (IOB)</a> representation.</span>
from the dataset:</p>

<table>
  <tbody>
    <tr>
      <td>Words</td>
      <td>Show</td>
      <td>flights</td>
      <td>from</td>
      <td>Boston</td>
      <td>to</td>
      <td>New</td>
      <td>York</td>
      <td>today</td>
    </tr>
    <tr>
      <td>Labels</td>
      <td>O</td>
      <td>O</td>
      <td>O</td>
      <td>B-dept</td>
      <td>O</td>
      <td>B-arr</td>
      <td>I-arr</td>
      <td>B-date</td>
    </tr>
  </tbody>
</table>

<p>The ATIS official split contains 4,978/893 sentences for a total of 56,590/9,198 words (average sentence length is 15) in the train/test set. The number of classes (different slots) is 128 including the O label (NULL).
Unseen words in the test set are encoded by <code class="highlighter-rouge">&lt;UNK&gt;</code> token and each digit is replaced with string <code class="highlighter-rouge">DIGIT</code>, i.e <code class="highlighter-rouge">20</code> is converted to <code class="highlighter-rouge">DIGITDIGIT</code>.</p>

<p>Our approach to the problem is to use</p>

<ul>
  <li>Word embeddings</li>
  <li>Recurrent Neural Networks</li>
</ul>

<p>I’ll talk about these briefly in the following sections.</p>

<h2 id="word-embeddings">Word Embeddings</h2>

<p>Word embeddings maps words to a vector in a high-dimensional space. 
If learnt the right way, these word embeddings can learn semantic and syntactic information of the words i.e, similar words are close to each other in this space and dissimilar words far apart.</p>

<p>These can be learnt either using large amount of text like Wikipedia or specifically for a given problem. We will take the second approach for this problem.</p>

<p>As an illustation, I have shown here the nearest neighbors in the word embedding space for some of the words . This embedding space was learnt by the model we define later in the post.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">sunday</th>
      <th style="text-align: left">delta</th>
      <th style="text-align: left">california</th>
      <th style="text-align: left">boston</th>
      <th style="text-align: left">august</th>
      <th style="text-align: left">time</th>
      <th style="text-align: left">car</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">wednesday</td>
      <td style="text-align: left">continental</td>
      <td style="text-align: left">colorado</td>
      <td style="text-align: left">nashville</td>
      <td style="text-align: left">september</td>
      <td style="text-align: left">schedule</td>
      <td style="text-align: left">rental</td>
    </tr>
    <tr>
      <td style="text-align: left">saturday</td>
      <td style="text-align: left">united</td>
      <td style="text-align: left">florida</td>
      <td style="text-align: left">toronto</td>
      <td style="text-align: left">july</td>
      <td style="text-align: left">times</td>
      <td style="text-align: left">limousine</td>
    </tr>
    <tr>
      <td style="text-align: left">friday</td>
      <td style="text-align: left">american</td>
      <td style="text-align: left">ohio</td>
      <td style="text-align: left">chicago</td>
      <td style="text-align: left">june</td>
      <td style="text-align: left">schedules</td>
      <td style="text-align: left">rentals</td>
    </tr>
    <tr>
      <td style="text-align: left">monday</td>
      <td style="text-align: left">eastern</td>
      <td style="text-align: left">georgia</td>
      <td style="text-align: left">phoenix</td>
      <td style="text-align: left">december</td>
      <td style="text-align: left">dinnertime</td>
      <td style="text-align: left">cars</td>
    </tr>
    <tr>
      <td style="text-align: left">tuesday</td>
      <td style="text-align: left">northwest</td>
      <td style="text-align: left">pennsylvania</td>
      <td style="text-align: left">cleveland</td>
      <td style="text-align: left">november</td>
      <td style="text-align: left">ord</td>
      <td style="text-align: left">taxi</td>
    </tr>
    <tr>
      <td style="text-align: left">thursday</td>
      <td style="text-align: left">us</td>
      <td style="text-align: left">north</td>
      <td style="text-align: left">atlanta</td>
      <td style="text-align: left">april</td>
      <td style="text-align: left">f28</td>
      <td style="text-align: left">train</td>
    </tr>
    <tr>
      <td style="text-align: left">wednesdays</td>
      <td style="text-align: left">nationair</td>
      <td style="text-align: left">tennessee</td>
      <td style="text-align: left">milwaukee</td>
      <td style="text-align: left">october</td>
      <td style="text-align: left">limo</td>
      <td style="text-align: left">limo</td>
    </tr>
    <tr>
      <td style="text-align: left">saturdays</td>
      <td style="text-align: left">lufthansa</td>
      <td style="text-align: left">minnesota</td>
      <td style="text-align: left">columbus</td>
      <td style="text-align: left">january</td>
      <td style="text-align: left">departure</td>
      <td style="text-align: left">ap</td>
    </tr>
    <tr>
      <td style="text-align: left">sundays</td>
      <td style="text-align: left">midwest</td>
      <td style="text-align: left">michigan</td>
      <td style="text-align: left">minneapolis</td>
      <td style="text-align: left">may</td>
      <td style="text-align: left">sfo</td>
      <td style="text-align: left">later</td>
    </tr>
  </tbody>
</table>

<h2 id="recurrent-neural-networks">Recurrent Neural Networks</h2>

<p>Convolutional layers can be a great way to pool local information, but they do not really capture the sequentiality of the data. 
Recurrent Neural Networks (RNNs) help us tackle sequential information like natural language.</p>

<p>If we are going to predict properties of the current word, we better remember the words before it too. An RNN has such an internal state/memory which stores the summary of the sequence it has seen so far. 
This allows us to use RNNs to solve complicated word tagging problems like part of speech (POS) tagging or slot filling as in our case.</p>

<p>Following diagram illustrates the internals of RNN:</p>

<p><span class="marginnote">
    Source: Nature
</span>
<img src="./Sasank&#39;s Blog_files/rnn.gif" alt="RNN"></p>

<p>Let’s briefly go through the diagram:</p>

<ul>
  <li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-1-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-1" style="width: 10.072em; display: inline-block;"><span style="display: inline-block; position: relative; width: 10.469em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.887em 1010.42em 2.879em -999.998em); top: -2.478em; left: 0em;"><span class="mrow" id="MathJax-Span-2"><span class="msubsup" id="MathJax-Span-3"><span style="display: inline-block; position: relative; width: 0.895em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.45em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-4" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.449em;"><span class="mn" id="MathJax-Span-5" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">1</span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span><span class="mo" id="MathJax-Span-6" style="font-family: STIXGeneral-Regular;">,</span><span class="msubsup" id="MathJax-Span-7" style="padding-left: 0.201em;"><span style="display: inline-block; position: relative; width: 0.895em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.45em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-8" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.449em;"><span class="mn" id="MathJax-Span-9" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">2</span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span><span class="mo" id="MathJax-Span-10" style="font-family: STIXGeneral-Regular;">,</span><span class="mo" id="MathJax-Span-11" style="font-family: STIXGeneral-Regular; padding-left: 0.201em;">.</span><span class="mo" id="MathJax-Span-12" style="font-family: STIXGeneral-Regular; padding-left: 0.201em;">.</span><span class="mo" id="MathJax-Span-13" style="font-family: STIXGeneral-Regular; padding-left: 0.201em;">.</span><span class="mo" id="MathJax-Span-14" style="font-family: STIXGeneral-Regular; padding-left: 0.201em;">,</span><span class="msubsup" id="MathJax-Span-15" style="padding-left: 0.201em;"><span style="display: inline-block; position: relative; width: 1.59em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.45em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-16" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.449em;"><span class="texatom" id="MathJax-Span-17"><span class="mrow" id="MathJax-Span-18"><span class="mi" id="MathJax-Span-19" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span class="mo" id="MathJax-Span-20" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">−</span><span class="mn" id="MathJax-Span-21" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">1</span></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span><span class="mo" id="MathJax-Span-22" style="font-family: STIXGeneral-Regular;">,</span><span class="msubsup" id="MathJax-Span-23" style="padding-left: 0.201em;"><span style="display: inline-block; position: relative; width: 0.747em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.45em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-24" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.449em;"><span class="texatom" id="MathJax-Span-25"><span class="mrow" id="MathJax-Span-26"><span class="mi" id="MathJax-Span-27" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span><span class="mo" id="MathJax-Span-28" style="font-family: STIXGeneral-Regular;">,</span><span class="msubsup" id="MathJax-Span-29" style="padding-left: 0.201em;"><span style="display: inline-block; position: relative; width: 1.59em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.45em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-30" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.449em;"><span class="texatom" id="MathJax-Span-31"><span class="mrow" id="MathJax-Span-32"><span class="mi" id="MathJax-Span-33" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span class="mo" id="MathJax-Span-34" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">+</span><span class="mn" id="MathJax-Span-35" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">1</span></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span><span class="mo" id="MathJax-Span-36" style="font-family: STIXGeneral-Regular;">.</span><span class="mo" id="MathJax-Span-37" style="font-family: STIXGeneral-Regular; padding-left: 0.201em;">.</span><span class="mo" id="MathJax-Span-38" style="font-family: STIXGeneral-Regular; padding-left: 0.201em;">.</span></span><span style="display: inline-block; width: 0px; height: 2.483em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.283em; border-left: 0px solid; width: 0px; height: 0.764em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>x</mi><mn>1</mn></msub><mo>,</mo><msub><mi>x</mi><mn>2</mn></msub><mo>,</mo><mo>.</mo><mo>.</mo><mo>.</mo><mo>,</mo><msub><mi>x</mi><mrow class="MJX-TeXAtom-ORD"><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>,</mo><msub><mi>x</mi><mrow class="MJX-TeXAtom-ORD"><mi>t</mi></mrow></msub><mo>,</mo><msub><mi>x</mi><mrow class="MJX-TeXAtom-ORD"><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>.</mo><mo>.</mo><mo>.</mo></math></span></span><script type="math/tex" id="MathJax-Element-1">x_1, x_2, ..., x_{t-1}, x_{t}, x_{t+1}...</script> is input to the RNN.</li>
  <li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-2-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-39" style="width: 0.697em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.697em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.59em 1000.7em 2.483em -999.998em); top: -2.18em; left: 0em;"><span class="mrow" id="MathJax-Span-40"><span class="msubsup" id="MathJax-Span-41"><span style="display: inline-block; position: relative; width: 0.697em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.35em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-42" style="font-family: STIXGeneral-Italic;">s</span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.399em;"><span class="mi" id="MathJax-Span-43" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.185em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.188em; border-left: 0px solid; width: 0px; height: 0.669em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>s</mi><mi>t</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-2">s_t</script> is the hidden state of the RNN at the step <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-3-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-44" style="width: 0.3em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.3em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.788em 1000.3em 2.631em -999.998em); top: -2.478em; left: 0em;"><span class="mrow" id="MathJax-Span-45"><span class="mi" id="MathJax-Span-46" style="font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.483em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.045em; border-left: 0px solid; width: 0px; height: 0.621em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi></math></span></span><script type="math/tex" id="MathJax-Element-3">t</script> . This is computed based on the state at the step <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-4-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-47" style="width: 1.937em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.987em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.639em 1001.89em 2.78em -999.998em); top: -2.478em; left: 0em;"><span class="mrow" id="MathJax-Span-48"><span class="mi" id="MathJax-Span-49" style="font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span class="mo" id="MathJax-Span-50" style="font-family: STIXGeneral-Regular; padding-left: 0.25em;">−</span><span class="mn" id="MathJax-Span-51" style="font-family: STIXGeneral-Regular; padding-left: 0.25em;">1</span></span><span style="display: inline-block; width: 0px; height: 2.483em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.188em; border-left: 0px solid; width: 0px; height: 0.86em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi><mo>−</mo><mn>1</mn></math></span></span><script type="math/tex" id="MathJax-Element-4">t-1</script> as <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-5-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-52" style="width: 7.84em; display: inline-block;"><span style="display: inline-block; position: relative; width: 8.137em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.639em 1008.09em 2.879em -999.998em); top: -2.478em; left: 0em;"><span class="mrow" id="MathJax-Span-53"><span class="msubsup" id="MathJax-Span-54"><span style="display: inline-block; position: relative; width: 0.697em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.35em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-55" style="font-family: STIXGeneral-Italic;">s</span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.399em;"><span class="mi" id="MathJax-Span-56" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span><span class="mo" id="MathJax-Span-57" style="font-family: STIXGeneral-Regular; padding-left: 0.3em;">=</span><span class="mi" id="MathJax-Span-58" style="font-family: STIXGeneral-Italic; padding-left: 0.3em;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.151em;"></span></span><span class="mo" id="MathJax-Span-59" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-60" style="font-family: STIXGeneral-Italic;">U<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.052em;"></span></span><span class="msubsup" id="MathJax-Span-61"><span style="display: inline-block; position: relative; width: 0.747em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.45em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-62" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.449em;"><span class="mi" id="MathJax-Span-63" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span><span class="mo" id="MathJax-Span-64" style="font-family: STIXGeneral-Regular; padding-left: 0.25em;">+</span><span class="mi" id="MathJax-Span-65" style="font-family: STIXGeneral-Italic; padding-left: 0.25em;">W<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.052em;"></span></span><span class="msubsup" id="MathJax-Span-66"><span style="display: inline-block; position: relative; width: 1.491em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.35em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-67" style="font-family: STIXGeneral-Italic;">s</span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.399em;"><span class="texatom" id="MathJax-Span-68"><span class="mrow" id="MathJax-Span-69"><span class="mi" id="MathJax-Span-70" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span class="mo" id="MathJax-Span-71" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">−</span><span class="mn" id="MathJax-Span-72" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">1</span></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span><span class="mo" id="MathJax-Span-73" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.483em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.283em; border-left: 0px solid; width: 0px; height: 1.002em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>s</mi><mi>t</mi></msub><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>U</mi><msub><mi>x</mi><mi>t</mi></msub><mo>+</mo><mi>W</mi><msub><mi>s</mi><mrow class="MJX-TeXAtom-ORD"><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-5">s_t = f(Ux_t + Ws_{t-1})</script>. Here f is a nonlinearity like tanh or ReLU.</li>
  <li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-6-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-74" style="width: 0.796em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.796em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.59em 1000.8em 2.483em -999.998em); top: -2.18em; left: 0em;"><span class="mrow" id="MathJax-Span-75"><span class="msubsup" id="MathJax-Span-76"><span style="display: inline-block; position: relative; width: 0.796em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.45em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-77" style="font-family: STIXGeneral-Italic;">o</span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.499em;"><span class="mi" id="MathJax-Span-78" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.185em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.188em; border-left: 0px solid; width: 0px; height: 0.669em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>o</mi><mi>t</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-6">o_t</script> is the output at the step <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-7-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-79" style="width: 0.3em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.3em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.788em 1000.3em 2.631em -999.998em); top: -2.478em; left: 0em;"><span class="mrow" id="MathJax-Span-80"><span class="mi" id="MathJax-Span-81" style="font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.483em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.045em; border-left: 0px solid; width: 0px; height: 0.621em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi></math></span></span><script type="math/tex" id="MathJax-Element-7">t</script>. Computed as <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-8-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;msub&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-82" style="width: 4.417em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.566em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.639em 1004.52em 2.83em -999.998em); top: -2.478em; left: 0em;"><span class="mrow" id="MathJax-Span-83"><span class="msubsup" id="MathJax-Span-84"><span style="display: inline-block; position: relative; width: 0.796em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.45em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-85" style="font-family: STIXGeneral-Italic;">o</span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.499em;"><span class="mi" id="MathJax-Span-86" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span><span class="mo" id="MathJax-Span-87" style="font-family: STIXGeneral-Regular; padding-left: 0.3em;">=</span><span class="mi" id="MathJax-Span-88" style="font-family: STIXGeneral-Italic; padding-left: 0.3em;">f<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.151em;"></span></span><span class="mo" id="MathJax-Span-89" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-90" style="font-family: STIXGeneral-Italic;">V<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.102em;"></span></span><span class="msubsup" id="MathJax-Span-91"><span style="display: inline-block; position: relative; width: 0.697em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.35em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-92" style="font-family: STIXGeneral-Italic;">s</span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.399em;"><span class="mi" id="MathJax-Span-93" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span><span class="mo" id="MathJax-Span-94" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.483em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.236em; border-left: 0px solid; width: 0px; height: 0.955em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>o</mi><mi>t</mi></msub><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>V</mi><msub><mi>s</mi><mi>t</mi></msub><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-8">o_t = f(Vs_t)</script></li>
  <li><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-9-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;U&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;V&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;W&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-95" style="width: 3.177em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.276em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.689em 1003.28em 2.78em -999.998em); top: -2.478em; left: 0em;"><span class="mrow" id="MathJax-Span-96"><span class="mi" id="MathJax-Span-97" style="font-family: STIXGeneral-Italic;">U<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.052em;"></span></span><span class="mo" id="MathJax-Span-98" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-99" style="font-family: STIXGeneral-Italic; padding-left: 0.201em;">V<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.102em;"></span></span><span class="mo" id="MathJax-Span-100" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-101" style="font-family: STIXGeneral-Italic; padding-left: 0.201em;">W<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.052em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.483em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.188em; border-left: 0px solid; width: 0px; height: 0.86em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>U</mi><mo>,</mo><mi>V</mi><mo>,</mo><mi>W</mi></math></span></span><script type="math/tex" id="MathJax-Element-9">U, V, W</script> are the learnable parameters of RNN.</li>
</ul>

<p>For our problem, we will pass word embeddings sequence as the input to the RNN.</p>

<h2 id="putting-it-all-together">Putting it all together</h2>

<p>Now that we’ve setup the problem and have a understanding of the basic blocks, let’s code it up.</p>

<p>Since we are using IOB representation for labels, it’s not trivial to calculate the scores of our model. We therefore use the <a href="http://www.cnts.ua.ac.be/conll2000/chunking/conlleval.txt">conlleval perl script</a> to compute the <a href="https://en.wikipedia.org/wiki/F1_score">F1 Scores</a>.
I’ve adapted the code from <a href="https://github.com/mesnilgr/is13">here</a> for the data preprocessing and score calculation.
Complete code is available at <a href="https://github.com/chsasank/ATIS.keras">GitHub</a></p>

<div class="language-bash highlighter-rouge">
  <pre class="highlight"><code><span class="gp">$ </span>git clone https://github.com/chsasank/ATIS.keras.git
<span class="gp">$ </span><span class="nb">cd </span>ATIS.keras
</code></pre>
</div>

<p>I recommend using <a href="http://jupyter.org/">jupyter notebook</a> to run and experiment with the snippets from the tutorial.</p>

<div class="language-bash highlighter-rouge">
  <pre class="highlight"><code><span class="gp">$ </span>jupyter notebook 
</code></pre>
</div>

<h3 id="loading-data">Loading Data</h3>

<p>Let’s load the data using <code class="highlighter-rouge">data.load.atisfull()</code>. It will download the data first time it is run. Words and labels are encoded as indexes to a vocabulary. This vocabulary is stored in <code class="highlighter-rouge">w2idx</code> and <code class="highlighter-rouge">labels2idx</code>.</p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">import</span> <span class="nn">data.load</span>

<span class="n">train_set</span><span class="p">,</span> <span class="n">valid_set</span><span class="p">,</span> <span class="n">dicts</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">load</span><span class="o">.</span><span class="n">atisfull</span><span class="p">()</span>
<span class="n">w2idx</span><span class="p">,</span> <span class="n">labels2idx</span> <span class="o">=</span> <span class="n">dicts</span><span class="p">[</span><span class="s">'words2idx'</span><span class="p">],</span> <span class="n">dicts</span><span class="p">[</span><span class="s">'labels2idx'</span><span class="p">]</span>

<span class="n">train_x</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">train_label</span> <span class="o">=</span> <span class="n">train_set</span>
<span class="n">val_x</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">val_label</span> <span class="o">=</span> <span class="n">valid_set</span>

<span class="c"># Create index to word/label dicts</span>
<span class="n">idx2w</span>  <span class="o">=</span> <span class="p">{</span><span class="n">w2idx</span><span class="p">[</span><span class="n">k</span><span class="p">]:</span><span class="n">k</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">w2idx</span><span class="p">}</span>
<span class="n">idx2la</span> <span class="o">=</span> <span class="p">{</span><span class="n">labels2idx</span><span class="p">[</span><span class="n">k</span><span class="p">]:</span><span class="n">k</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">labels2idx</span><span class="p">}</span>

<span class="c"># For conlleval script</span>
<span class="n">words_train</span> <span class="o">=</span> <span class="p">[</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">idx2w</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">w</span><span class="p">))</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">train_x</span><span class="p">]</span>
<span class="n">labels_train</span> <span class="o">=</span> <span class="p">[</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">idx2la</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">y</span><span class="p">))</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">train_label</span><span class="p">]</span>
<span class="n">words_val</span> <span class="o">=</span> <span class="p">[</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">idx2w</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">w</span><span class="p">))</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">val_x</span><span class="p">]</span>
<span class="n">labels_val</span> <span class="o">=</span> <span class="p">[</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">idx2la</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">y</span><span class="p">))</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">val_label</span><span class="p">]</span>

<span class="n">n_classes</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">idx2la</span><span class="p">)</span>
<span class="n">n_vocab</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">idx2w</span><span class="p">)</span>
</code></pre>
</div>

<p>Let’s print an example sentence and label.</p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Example sentence : {}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">words_train</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Encoded form: {}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">train_x</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
<span class="k">print</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"It's label : {}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">labels_train</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Encoded form: {}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">train_label</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</code></pre>
</div>

<p>Output:</p>

<div class="highlighter-rouge">
  <pre class="highlight"><code>Example sentence : ['i', 'want', 'to', 'fly', 'from', 'boston', 'at', 'DIGITDIGITDIGIT', 'am', 'and', 'arrive', 'in', 'denver', 'at', 'DIGITDIGITDIGITDIGIT', 'in', 'the', 'morning']
Encoded form: [232 542 502 196 208  77  62  10  35  40  58 234 137  62  11 234 481 321]

It's label : ['O', 'O', 'O', 'O', 'O', 'B-fromloc.city_name', 'O', 'B-depart_time.time', 'I-depart_time.time', 'O', 'O', 'O', 'B-toloc.city_name', 'O', 'B-arrive_time.time', 'O', 'O', 'B-arrive_time.period_of_day']
Encoded form: [126 126 126 126 126  48 126  35  99 126 126 126  78 126  14 126 126  12]
</code></pre>
</div>

<h3 id="keras-model">Keras model</h3>

<p>Next we define the keras model. Keras has inbuilt <code class="highlighter-rouge">Embedding</code> layer for word embeddings. It expects integer indices. <code class="highlighter-rouge">SimpleRNN</code> is the recurrent neural network layer described above. We will have to use <code class="highlighter-rouge">TimeDistributed</code> to pass the output of RNN <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-10-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-102" style="width: 0.796em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.796em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.59em 1000.8em 2.483em -999.998em); top: -2.18em; left: 0em;"><span class="mrow" id="MathJax-Span-103"><span class="msubsup" id="MathJax-Span-104"><span style="display: inline-block; position: relative; width: 0.796em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.45em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-105" style="font-family: STIXGeneral-Italic;">o</span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.499em;"><span class="mi" id="MathJax-Span-106" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.185em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.188em; border-left: 0px solid; width: 0px; height: 0.669em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>o</mi><mi>t</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-10">o_t</script> at each time step <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-11-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-107" style="width: 0.3em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.3em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.788em 1000.3em 2.631em -999.998em); top: -2.478em; left: 0em;"><span class="mrow" id="MathJax-Span-108"><span class="mi" id="MathJax-Span-109" style="font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.483em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.045em; border-left: 0px solid; width: 0px; height: 0.621em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>t</mi></math></span></span><script type="math/tex" id="MathJax-Element-11">t</script> to a fully connected layer.  Otherwise, output at the final time step will be passed on to the next layer.</p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span>
<span class="kn">from</span> <span class="nn">keras.layers.embeddings</span> <span class="kn">import</span> <span class="n">Embedding</span>
<span class="kn">from</span> <span class="nn">keras.layers.recurrent</span> <span class="kn">import</span> <span class="n">SimpleRNN</span>
<span class="kn">from</span> <span class="nn">keras.layers.core</span> <span class="kn">import</span> <span class="n">Dense</span><span class="p">,</span> <span class="n">Dropout</span>
<span class="kn">from</span> <span class="nn">keras.layers.wrappers</span> <span class="kn">import</span> <span class="n">TimeDistributed</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Convolution1D</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Embedding</span><span class="p">(</span><span class="n">n_vocab</span><span class="p">,</span><span class="mi">100</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.25</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">SimpleRNN</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="n">return_sequences</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">TimeDistributed</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">n_classes</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'softmax'</span><span class="p">)))</span>
<span class="n">model</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">'rmsprop'</span><span class="p">,</span> <span class="s">'categorical_crossentropy'</span><span class="p">)</span>

</code></pre>
</div>

<h3 id="training">Training</h3>

<p>Now, let’s start training our model. We will pass each sentence as a batch to the model. We cannot use <code class="highlighter-rouge">model.fit()</code> as it expects all the sentences to be of same size. We will therefore use <code class="highlighter-rouge">model.train_on_batch()</code>.
<span class="marginnote">
    Training is very fast as the dataset is relatively small. Each epoch takes 20 seconds on my Macbook Air.
</span></p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="kn">import</span> <span class="nn">progressbar</span>
<span class="n">n_epochs</span> <span class="o">=</span> <span class="mi">30</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n_epochs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Training epoch {}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
    
    <span class="n">bar</span> <span class="o">=</span> <span class="n">progressbar</span><span class="o">.</span><span class="n">ProgressBar</span><span class="p">(</span><span class="n">max_value</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">train_x</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">n_batch</span><span class="p">,</span> <span class="n">sent</span> <span class="ow">in</span> <span class="n">bar</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">train_x</span><span class="p">)):</span>
        <span class="n">label</span> <span class="o">=</span> <span class="n">train_label</span><span class="p">[</span><span class="n">n_batch</span><span class="p">]</span>
        <span class="c"># Make labels one hot</span>
        <span class="n">label</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">eye</span><span class="p">(</span><span class="n">n_classes</span><span class="p">)[</span><span class="n">label</span><span class="p">][</span><span class="n">np</span><span class="o">.</span><span class="n">newaxis</span><span class="p">,:]</span> 
        <span class="c"># View each sentence as a batch</span>
        <span class="n">sent</span> <span class="o">=</span> <span class="n">sent</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">newaxis</span><span class="p">,:]</span>
        
        <span class="k">if</span> <span class="n">sent</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span> <span class="c">#ignore 1 word sentences</span>
            <span class="n">model</span><span class="o">.</span><span class="n">train_on_batch</span><span class="p">(</span><span class="n">sent</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
</code></pre>
</div>

<h3 id="evaluation">Evaluation</h3>

<p>To measure the accuracy of the model, we use <code class="highlighter-rouge">model.predict_on_batch()</code> and 
<code class="highlighter-rouge">metrics.accuracy.conlleval()</code>.</p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="kn">from</span> <span class="nn">metrics.accuracy</span> <span class="kn">import</span> <span class="n">conlleval</span>

<span class="n">labels_pred_val</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">bar</span> <span class="o">=</span> <span class="n">progressbar</span><span class="o">.</span><span class="n">ProgressBar</span><span class="p">(</span><span class="n">max_value</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">val_x</span><span class="p">))</span>
<span class="k">for</span> <span class="n">n_batch</span><span class="p">,</span> <span class="n">sent</span> <span class="ow">in</span> <span class="n">bar</span><span class="p">(</span><span class="nb">enumerate</span><span class="p">(</span><span class="n">val_x</span><span class="p">)):</span>
    <span class="n">label</span> <span class="o">=</span> <span class="n">val_label</span><span class="p">[</span><span class="n">n_batch</span><span class="p">]</span>
    <span class="n">label</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">eye</span><span class="p">(</span><span class="n">n_classes</span><span class="p">)[</span><span class="n">label</span><span class="p">][</span><span class="n">np</span><span class="o">.</span><span class="n">newaxis</span><span class="p">,:]</span>
    <span class="n">sent</span> <span class="o">=</span> <span class="n">sent</span><span class="p">[</span><span class="n">np</span><span class="o">.</span><span class="n">newaxis</span><span class="p">,:]</span>

    <span class="n">pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">predict_on_batch</span><span class="p">(</span><span class="n">sent</span><span class="p">)</span>
    <span class="n">pred</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">argmax</span><span class="p">(</span><span class="n">pred</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">labels_pred_val</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">pred</span><span class="p">)</span>

<span class="n">labels_pred_val</span> <span class="o">=</span> <span class="p">[</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">idx2la</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">y</span><span class="p">))</span> \
                                    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">labels_pred_val</span><span class="p">]</span>
<span class="n">con_dict</span> <span class="o">=</span> <span class="n">conlleval</span><span class="p">(</span><span class="n">labels_pred_val</span><span class="p">,</span> <span class="n">labels_val</span><span class="p">,</span> 
                            <span class="n">words_val</span><span class="p">,</span> <span class="s">'measure.txt'</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Precision = {}, Recall = {}, F1 = {}'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span>
            <span class="n">con_dict</span><span class="p">[</span><span class="s">'r'</span><span class="p">],</span> <span class="n">con_dict</span><span class="p">[</span><span class="s">'p'</span><span class="p">],</span> <span class="n">con_dict</span><span class="p">[</span><span class="s">'f1'</span><span class="p">]))</span>

</code></pre>
</div>

<p>With this model, I get <strong>92.36</strong> F1 Score.</p>

<div class="highlighter-rouge">
  <pre class="highlight"><code>Precision = 92.07, Recall = 92.66, F1 = 92.36
</code></pre>
</div>

<p>Note that for the sake of brevity, I’ve not showed logging part of the code. Loggging losses and accuracies is an important part of coding up an model. 
An improved model (described in the next section) with logging is at <code class="highlighter-rouge">main.py</code>.
You can run it as :</p>

<div class="language-bash highlighter-rouge">
  <pre class="highlight"><code><span class="gp">$ </span>python main.py
</code></pre>
</div>

<h3 id="improvements">Improvements</h3>

<p>One drawback with our current model is that there is no lookahead. i.e, output <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-12-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-110" style="width: 0.796em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.796em; height: 0px; font-size: 96%;"><span style="position: absolute; clip: rect(1.59em 1000.8em 2.483em -999.998em); top: -2.18em; left: 0em;"><span class="mrow" id="MathJax-Span-111"><span class="msubsup" id="MathJax-Span-112"><span style="display: inline-block; position: relative; width: 0.796em; height: 0px;"><span style="position: absolute; clip: rect(3.425em 1000.45em 4.169em -999.998em); top: -4.015em; left: 0em;"><span class="mi" id="MathJax-Span-113" style="font-family: STIXGeneral-Italic;">o</span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span><span style="position: absolute; top: -3.867em; left: 0.499em;"><span class="mi" id="MathJax-Span-114" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 4.02em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.185em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.188em; border-left: 0px solid; width: 0px; height: 0.669em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>o</mi><mi>t</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-12">o_t</script> depends only on the current and previous words but not on the words next to it. One can imagine that clues about the properties of the current word is also held by next word.</p>

<p>Lookahead can easily be implemented by having a convolutional layer before RNN and after word embeddings:</p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Embedding</span><span class="p">(</span><span class="n">n_vocab</span><span class="p">,</span><span class="mi">100</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Convolution1D</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">border_mode</span><span class="o">=</span><span class="s">'same'</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.25</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">GRU</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="n">return_sequences</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">TimeDistributed</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">n_classes</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'softmax'</span><span class="p">)))</span>
<span class="n">model</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="s">'rmsprop'</span><span class="p">,</span> <span class="s">'categorical_crossentropy'</span><span class="p">)</span>
</code></pre>
</div>

<p>With this improved model, I get <strong>94.90</strong> F1 Score.</p>

<h2 id="conclusion">Conclusion</h2>
<p>In this tutorial, we have learnt about word embeddings and RNNs. We have applied these to a NLP problem: ATIS.
We also have made an improvement to our model.</p>

<p>To improve the model further, we could try using word embeddings learnt on a  large corpus like Wikipedia. Also, there are variants of RNNs like LSTM or GRU which can be experimented with.</p>

<h3 id="references">References</h3>

<ol>
  <li>Grégoire Mesnil, Xiaodong He, Li Deng and Yoshua Bengio. Investigation of Recurrent-Neural-Network Architectures and Learning Methods for Spoken Language Understanding. Interspeech, 2013. <a href="http://www.iro.umontreal.ca/~lisa/pointeurs/RNNSpokenLanguage2013.pdf">pdf</a></li>
  <li>Recurrent Neural Networks with Word Embeddings, <a href="http://deeplearning.net/tutorial/rnnslu.html">theano tutorial</a></li>
</ol>

          </section>

      </article>
    
      <article itemscope="" itemtype="http://schema.org/BlogPosting" role="article">

          <header>
            <h2 itemprop="name"><a href="http://chsasank.github.io/keras-tutorial.html" itemprop="url">Keras Tutorial - Traffic Sign Recognition</a></h2>
          </header>

          <div class="post-meta">
            <time datetime="05 January 2017">05 January 2017</time>
          </div>

          <section itemprop="description">
            <p>In this tutorial
<span id="reqs" class="margin-toggle sidenote-number"></span>
<span class="sidenote">Tutorial assumes you have some basic working knowledge of machine learning and numpy.</span>
, we will get our hands dirty with deep learning by solving a real world problem.
The problem we are gonna tackle is <a href="http://benchmark.ini.rub.de/?section=gtsrb&amp;subsection=news">The German Traffic Sign Recognition Benchmark</a>(GTSRB).
The problem is to to recognize the traffic sign from the images.
Solving this problem is essential for self-driving cars to operate on roads.</p>

<p><span class="marginnote" margin-bottom="100px">
    Representative images for each of the traffic sign classes in the GTSRB dataset
</span></p>
<figure>
  <amp-img width="867" height="495" layout="responsive" src="/assets/images/traffic/classes.jpg" class="i-amphtml-element i-amphtml-layout-responsive i-amphtml-layout-size-defined"><i-amphtml-sizer style="display: block; padding-top: 57.0934%;"></i-amphtml-sizer></amp-img>
</figure>

<p>The dataset features 43 different signs under various sizes, lighting conditions, occlusions and is very similar to real-life data. 
Training set includes about 39000 images while test set has around 12000 images. 
Images are <em>not</em> guaranteed to be of fixed dimensions and the sign is <em>not</em> necessarily centered in each image.
Each image contains about 10% border around the actual traffic sign.</p>

<p>Our approach to solving the problem will of course be very successful convolutional neural networks (CNNs).
CNNs are multi-layered feed-forward neural networks that are able to learn task-specific invariant features in a hierarchical manner.
You can read more about them in very readable <em>Neural Networks and Deep Learning</em> book by Michael Nielsen.
<a href="http://neuralnetworksanddeeplearning.com/chap6.html">Chapter 6</a> is the essential reading. 
Just read the <a href="http://neuralnetworksanddeeplearning.com/chap6.html#introducing_convolutional_networks">first section</a> in this chapter if you are in a hurry.</p>

<p><em>Note about the code:</em> 
A recommended way to run the code in this tutorial and experiment with it is <a href="http://jupyter.org/">Jupyter notebook</a>.
A notebook with slightly improved code is available <a href="https://github.com/chsasank/Traffic-Sign-Classification.keras/blob/master/Traffic%20Sign%20Classification.ipynb">here</a>.</p>

<p>We will implement our CNNs in <a href="http://keras.io/">Keras</a>. 
Keras is a deep learning library written in python and allows us to do quick experimentation.
Let’s start by installing Keras and other libraries:
<span id="tip" class="margin-toggle sidenote-number"></span>
<span class="sidenote">Protip: Use <a href="https://www.continuum.io/downloads">anaconda python</a> distribution.</span></p>

<div class="language-bash highlighter-rouge">
  <pre class="highlight"><code><span class="gp">$ </span>sudo pip install keras scikit-image pandas
</code></pre>
</div>

<p>Then download ‘Images and annotations’ for training and test set from 
<a href="http://benchmark.ini.rub.de/?section=gtsrb&amp;subsection=dataset">GTSRB website</a> and extract them into a folder.
Also download ‘Extended annotations including class ids’ file for test set. Organize these files so that directory structure looks like this:</p>

<div class="highlighter-rouge">
  <pre class="highlight"><code>GTSRB
├── GT-final_test.csv
├── Final_Test
│&nbsp;&nbsp; └── Images
└── Final_Training
    └── Images
        ├── 00000
        ├── 00001
        ├── ...
        ├── 00041
        └── 00042
</code></pre>
</div>

<h3 id="preprocessing">Preprocessing</h3>
<p>As you can see from the representative images above, images vary a lot in illumination. 
They also vary in size. So, let’s write a function to do 
<a href="https://en.wikipedia.org/wiki/Histogram_equalization">histogram equalization</a>
in HSV color space and resize the images to a standard size:
<span class="marginnote" margin-bottom="100px">
    <amp-img width="156" height="152" src="/assets/images/traffic/input.png" alt="input to preprocess_img" class="i-amphtml-element i-amphtml-layout-fixed i-amphtml-layout-size-defined" style="width: 156px; height: 152px;"></amp-img>
    <br>Input image to <code class="highlighter-rouge">preprocess_img</code> (scaled 4x)
</span>
<span class="marginnote">
    <br>
    <amp-img src="/assets/images/traffic/output.png" width="192" height="192" alt="output from preprocess_img" class="i-amphtml-element i-amphtml-layout-fixed i-amphtml-layout-size-defined" style="width: 192px; height: 192px;"></amp-img>
    <br> Processed image (scaled 4x) 
</span></p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
<span class="kn">from</span> <span class="nn">skimage</span> <span class="kn">import</span> <span class="n">color</span><span class="p">,</span> <span class="n">exposure</span><span class="p">,</span> <span class="n">transform</span>

<span class="n">NUM_CLASSES</span> <span class="o">=</span> <span class="mi">43</span>
<span class="n">IMG_SIZE</span> <span class="o">=</span> <span class="mi">48</span>

<span class="k">def</span> <span class="nf">preprocess_img</span><span class="p">(</span><span class="n">img</span><span class="p">):</span>
    <span class="c"># Histogram normalization in v channel</span>
    <span class="n">hsv</span> <span class="o">=</span> <span class="n">color</span><span class="o">.</span><span class="n">rgb2hsv</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
    <span class="n">hsv</span><span class="p">[:,:,</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">exposure</span><span class="o">.</span><span class="n">equalize_hist</span><span class="p">(</span><span class="n">hsv</span><span class="p">[:,:,</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">color</span><span class="o">.</span><span class="n">hsv2rgb</span><span class="p">(</span><span class="n">hsv</span><span class="p">)</span>

    <span class="c"># central square crop</span>
    <span class="n">min_side</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">img</span><span class="o">.</span><span class="n">shape</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">centre</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">img</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">//</span><span class="mi">2</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="p">[</span><span class="n">centre</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="n">min_side</span><span class="o">//</span><span class="mi">2</span><span class="p">:</span><span class="n">centre</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">min_side</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span>
              <span class="n">centre</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">min_side</span><span class="o">//</span><span class="mi">2</span><span class="p">:</span><span class="n">centre</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">min_side</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span>
              <span class="p">:]</span>

    <span class="c"># rescale to standard size</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">transform</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="n">IMG_SIZE</span><span class="p">,</span> <span class="n">IMG_SIZE</span><span class="p">))</span>

    <span class="c"># roll color axis to axis 0</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">rollaxis</span><span class="p">(</span><span class="n">img</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">img</span>
</code></pre>
</div>

<p>Let’s preprocess all the training images are store into numpy arrays. 
We’ll also get labels of images from paths. 
We’ll convert targets to one-hot form as is required by keras:</p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="kn">from</span> <span class="nn">skimage</span> <span class="kn">import</span> <span class="n">io</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">glob</span>

<span class="k">def</span> <span class="nf">get_class</span><span class="p">(</span><span class="n">img_path</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">img_path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">'/'</span><span class="p">)[</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>

<span class="n">root_dir</span> <span class="o">=</span> <span class="s">'GTSRB/Final_Training/Images/'</span>
<span class="n">imgs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">labels</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">all_img_paths</span> <span class="o">=</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">root_dir</span><span class="p">,</span> <span class="s">'*/*.ppm'</span><span class="p">))</span>
<span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">all_img_paths</span><span class="p">)</span>
<span class="k">for</span> <span class="n">img_path</span> <span class="ow">in</span> <span class="n">all_img_paths</span><span class="p">:</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">preprocess_img</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="n">img_path</span><span class="p">))</span>
    <span class="n">label</span> <span class="o">=</span> <span class="n">get_class</span><span class="p">(</span><span class="n">img_path</span><span class="p">)</span>
    <span class="n">imgs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
    <span class="n">labels</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">label</span><span class="p">)</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">imgs</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="s">'float32'</span><span class="p">)</span>
<span class="c"># Make one hot targets</span>
<span class="n">Y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">eye</span><span class="p">(</span><span class="n">NUM_CLASSES</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="s">'uint8'</span><span class="p">)[</span><span class="n">labels</span><span class="p">]</span> 

</code></pre>
</div>

<h3 id="models">Models</h3>

<p>Let’s now define our models. 
We’ll use feed forward network with 6 convolutional layers followed by a fully connected hidden layer. 
We’ll also use dropout layers in between. 
Dropout regularizes the networks, i.e. it prevents the network from overfitting.</p>

<p>All our layers have <code class="highlighter-rouge">relu</code> activations except the output layer. 
Output layer uses <code class="highlighter-rouge">softmax</code> activation as it has to output the probability for each of the classes.</p>

<p><code class="highlighter-rouge">Sequential</code> is a keras container for linear stack of layers.
Each of the layers in the model needs to know the input shape it should expect, 
but it is enough to specify <code class="highlighter-rouge">input_shape</code> for the first layer of the <code class="highlighter-rouge">Sequential</code> model. 
Rest of the layers do automatic shape inference.</p>

<p>To attach a fully connected layer (aka dense layer) to a convolutional layer, we will have to reshape/flatten the output of the conv layer. This is achieved by <code class="highlighter-rouge">Flatten</code> layer</p>

<p>Go through the documentation of keras (relevant documentation : <a href="http://keras.io/layers/convolutional/">here</a> and <a href="http://keras.io/layers/core/">here</a>) to understand what parameters for each of the layers mean.</p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Dense</span><span class="p">,</span> <span class="n">Dropout</span><span class="p">,</span> <span class="n">Activation</span><span class="p">,</span> <span class="n">Flatten</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Convolution2D</span><span class="p">,</span> <span class="n">MaxPooling2D</span>
<span class="kn">from</span> <span class="nn">keras.optimizers</span> <span class="kn">import</span> <span class="n">SGD</span>


<span class="k">def</span> <span class="nf">cnn_model</span><span class="p">():</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>

    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Convolution2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">border_mode</span><span class="o">=</span><span class="s">'same'</span><span class="p">,</span> 
                            <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">IMG_SIZE</span><span class="p">,</span> <span class="n">IMG_SIZE</span><span class="p">),</span>
                            <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Convolution2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">))</span>

    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Convolution2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">border_mode</span><span class="o">=</span><span class="s">'same'</span><span class="p">,</span>
                            <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Convolution2D</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">))</span>

    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Convolution2D</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">border_mode</span><span class="o">=</span><span class="s">'same'</span><span class="p">,</span> 
                            <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Convolution2D</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">MaxPooling2D</span><span class="p">(</span><span class="n">pool_size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">))</span>

    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Flatten</span><span class="p">())</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'relu'</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">))</span>
    <span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">NUM_CLASSES</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'softmax'</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">model</span>
</code></pre>
</div>

<p>Before training the model, we need to configure the model the learning algorithm and compile it.
We need to specify,</p>

<ul>
  <li><code class="highlighter-rouge">loss</code> : Loss function we want to optimize. We cannot use error percentage as it is not continuous and thus non differentiable.
          We therefore use a proxy for it: <code class="highlighter-rouge">categorical_crossentropy</code></li>
  <li><code class="highlighter-rouge">optimizer</code> : We use standard stochastic gradient descent with Nesterov momentum.</li>
  <li><code class="highlighter-rouge">metric</code> : Since we are dealing with a classification problem, our metric is accuracy.</li>
</ul>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="kn">from</span> <span class="nn">keras.optimizers</span> <span class="kn">import</span> <span class="n">SGD</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">cnn_model</span><span class="p">()</span>

<span class="c"># let's train the model using SGD + momentum</span>
<span class="n">lr</span> <span class="o">=</span> <span class="mf">0.01</span>
<span class="n">sgd</span> <span class="o">=</span> <span class="n">SGD</span><span class="p">(</span><span class="n">lr</span><span class="o">=</span><span class="n">lr</span><span class="p">,</span> <span class="n">decay</span><span class="o">=</span><span class="mf">1e-6</span><span class="p">,</span> <span class="n">momentum</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">nesterov</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="n">loss</span><span class="o">=</span><span class="s">'categorical_crossentropy'</span><span class="p">,</span>
          <span class="n">optimizer</span><span class="o">=</span><span class="n">sgd</span><span class="p">,</span>
          <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s">'accuracy'</span><span class="p">])</span>
</code></pre>
</div>

<h3 id="training">Training</h3>

<p>Now, our model is ready to train. 
During the training, our model will iterate over batches of training set, each of size <code class="highlighter-rouge">batch_size</code>. 
For each batch, gradients will be computed and updates will be made to the weights of the network automatically.
One iteration over all the training set is referred to as an epoch. 
Training is usually run until the loss converges to a constant.</p>

<p>We will add a couple of features to our training:</p>

<ul>
  <li>Learning rate scheduler : Decaying learning rate over the epochs usually helps model learn better</li>
  <li>Model checkpoint : We will save the model with best validation accuracy. This is useful because our network might start
overfitting after a certain number of epochs, but we want the best model.</li>
</ul>

<p>These are not necessary but they improve the model accuracy.
These features are implemented via <a href="http://keras.io/callbacks/"><code class="highlighter-rouge">callback</code> feature</a> of Keras. 
<code class="highlighter-rouge">callback</code> are a set of functions that will applied at given stages of training procedure like end of an epoch of training. 
Keras provides inbuilt functions for both learning rate scheduling and model checkpointing.</p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="kn">from</span> <span class="nn">keras.callbacks</span> <span class="kn">import</span> <span class="n">LearningRateScheduler</span><span class="p">,</span> <span class="n">ModelCheckpoint</span>

<span class="k">def</span> <span class="nf">lr_schedule</span><span class="p">(</span><span class="n">epoch</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">lr</span><span class="o">*</span><span class="p">(</span><span class="mf">0.1</span><span class="o">**</span><span class="nb">int</span><span class="p">(</span><span class="n">epoch</span><span class="o">/</span><span class="mi">10</span><span class="p">))</span>

<span class="n">batch_size</span> <span class="o">=</span> <span class="mi">32</span>
<span class="n">nb_epoch</span> <span class="o">=</span> <span class="mi">30</span>

<span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span>
          <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span>
          <span class="n">nb_epoch</span><span class="o">=</span><span class="n">nb_epoch</span><span class="p">,</span>
          <span class="n">validation_split</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
          <span class="n">callbacks</span><span class="o">=</span><span class="p">[</span><span class="n">LearningRateScheduler</span><span class="p">(</span><span class="n">lr_schedule</span><span class="p">),</span>
                    <span class="n">ModelCheckpoint</span><span class="p">(</span><span class="s">'model.h5'</span><span class="p">,</span><span class="n">save_best_only</span><span class="o">=</span><span class="bp">True</span><span class="p">)]</span>
         <span class="p">)</span>
</code></pre>
</div>

<p>You’ll see that model starts training and logs the losses and accuracies:</p>

<div class="highlighter-rouge">
  <pre class="highlight"><code>Train on 31367 samples, validate on 7842 samples
Epoch 1/30
31367/31367 [==============================] - 30s - loss: 1.1502 - acc: 0.6723 - val_loss: 0.1262 - val_acc: 0.9616
Epoch 2/30
31367/31367 [==============================] - 32s - loss: 0.2143 - acc: 0.9359 - val_loss: 0.0653 - val_acc: 0.9809
Epoch 3/30
31367/31367 [==============================] - 31s - loss: 0.1342 - acc: 0.9604 - val_loss: 0.0590 - val_acc: 0.9825
...

</code></pre>
</div>

<p>Now this might take a bit of time, especially if you are running on CPU. 
If you have a Nvidia GPU, you should install cuda. It speeds up the training dramatically.
For example, on my Macbook air, it takes 10 minutes per epoch while on a machine with Nvidia Titan X GPU, it takes 30 seconds.
Even modest GPUs offer impressive speedup because of the inherent parallelizability of the neural networks.
This makes GPUs necessary for deep learning if anything big has to be done.
Grab a coffee while you wait for training to complete ;).</p>

<p>Congratulations! You have just trained your first deep learning model.</p>

<h3 id="evaluation">Evaluation</h3>
<p>Let’s quickly load test data and evaluate our model on it:</p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'GT-final_test.csv'</span><span class="p">,</span><span class="n">sep</span><span class="o">=</span><span class="s">';'</span><span class="p">)</span>

<span class="c"># Load test dataset</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">y_test</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">file_name</span><span class="p">,</span> <span class="n">class_id</span>  <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="s">'Filename'</span><span class="p">]),</span> <span class="nb">list</span><span class="p">(</span><span class="n">test</span><span class="p">[</span><span class="s">'ClassId'</span><span class="p">])):</span>
    <span class="n">img_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s">'GTSRB/Final_Test/Images/'</span><span class="p">,</span><span class="n">file_name</span><span class="p">)</span>
    <span class="n">X_test</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">preprocess_img</span><span class="p">(</span><span class="n">io</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="n">img_path</span><span class="p">)))</span>
    <span class="n">y_test</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">class_id</span><span class="p">)</span>
    
<span class="n">X_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="n">y_test</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">y_test</span><span class="p">)</span>

<span class="c"># predict and evaluate</span>
<span class="n">y_pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">predict_classes</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="n">acc</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">y_pred</span><span class="o">==</span><span class="n">y_test</span><span class="p">)</span><span class="o">/</span><span class="n">np</span><span class="o">.</span><span class="n">size</span><span class="p">(</span><span class="n">y_pred</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Test accuracy = {}"</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">acc</span><span class="p">))</span>
</code></pre>
</div>

<p>Which outputs on my system
<span id="results" class="margin-toggle sidenote-number"></span>
<span class="sidenote">Results may change a bit because the weights of the neural network are randomly initialized.</span>:</p>

<div class="highlighter-rouge">
  <pre class="highlight"><code>12630/12630 [==============================] - 2s
Test accuracy = 0.9792557403008709
</code></pre>
</div>

<p>97.92%! That’s sweet!
It’s not far from average human performance (98.84%)[1].</p>

<p>A lot of things can be done to squeeze out extra performance from the neural net. 
I’ll implement one such improvement in the next section.</p>

<h3 id="data-augmentation">Data Augmentation</h3>

<p>You might think 40000 images are a lot of images. Think about it again. 
Our model has 1358155 parameters (try <code class="highlighter-rouge">model.count_params()</code> or <code class="highlighter-rouge">model.summary()</code>). 
That’s 4X the number of training images.</p>

<p>If we can generate new images for training from the existing images, that will be a great way to increase the size of the dataset. 
This can be done by slightly</p>

<ul>
  <li>translating of image</li>
  <li>rotating of image</li>
  <li>Shearing the image</li>
  <li>Zooming in/out of the image</li>
</ul>

<p>Rather than generating and saving such images to hard disk, we will generate them on the fly during training.
This can be done directly using <a href="http://keras.io/preprocessing/image/">built-in functionality</a> of keras.</p>

<div class="language-python highlighter-rouge">
  <pre class="highlight"><code><span class="kn">from</span> <span class="nn">keras.preprocessing.image</span> <span class="kn">import</span> <span class="n">ImageDataGenerator</span>
<span class="kn">from</span> <span class="nn">sklearn.cross_validation</span> <span class="kn">import</span> <span class="n">train_test_split</span>

<span class="n">X_train</span><span class="p">,</span> <span class="n">X_val</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">Y_val</span> <span class="o">=</span> <span class="n">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>

<span class="n">datagen</span> <span class="o">=</span> <span class="n">ImageDataGenerator</span><span class="p">(</span><span class="n">featurewise_center</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> 
                            <span class="n">featurewise_std_normalization</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> 
                            <span class="n">width_shift_range</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                            <span class="n">height_shift_range</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                            <span class="n">zoom_range</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
                            <span class="n">shear_range</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                            <span class="n">rotation_range</span><span class="o">=</span><span class="mf">10.</span><span class="p">,)</span>

<span class="n">datagen</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>

<span class="c"># Reinitialize model and compile </span>
<span class="n">model</span> <span class="o">=</span> <span class="n">cnn_model</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="n">loss</span><span class="o">=</span><span class="s">'categorical_crossentropy'</span><span class="p">,</span>
          <span class="n">optimizer</span><span class="o">=</span><span class="n">sgd</span><span class="p">,</span>
          <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s">'accuracy'</span><span class="p">])</span>

<span class="c"># Train again</span>
<span class="n">nb_epoch</span> <span class="o">=</span> <span class="mi">30</span>
<span class="n">model</span><span class="o">.</span><span class="n">fit_generator</span><span class="p">(</span><span class="n">datagen</span><span class="o">.</span><span class="n">flow</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">),</span>
                            <span class="n">samples_per_epoch</span><span class="o">=</span><span class="n">X_train</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                            <span class="n">nb_epoch</span><span class="o">=</span><span class="n">nb_epoch</span><span class="p">,</span>
                            <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">X_val</span><span class="p">,</span> <span class="n">Y_val</span><span class="p">),</span>
                            <span class="n">callbacks</span><span class="o">=</span><span class="p">[</span><span class="n">LearningRateScheduler</span><span class="p">(</span><span class="n">lr_schedule</span><span class="p">),</span>
                                       <span class="n">ModelCheckpoint</span><span class="p">(</span><span class="s">'model.h5'</span><span class="p">,</span><span class="n">save_best_only</span><span class="o">=</span><span class="bp">True</span><span class="p">)]</span>
                    <span class="p">)</span>

</code></pre>
</div>
<p>With this model, I get 98.29% accuracy on test set.</p>

<p>Frankly, I haven’t done much parameter tuning. 
I’ll make a small list of things which can be tried to improve the model:</p>

<ul>
  <li>Try different network architectures. Try deeper and shallower networks.</li>
  <li>Try adding <a href="http://keras.io/layers/normalization/">BatchNormalization</a> layers to the network.</li>
  <li>Experiment with different weight initializations</li>
  <li>Try different learning rates and schedules</li>
  <li>Make an ensemble of models</li>
  <li>Try normalization of input images</li>
  <li>More aggressive data augmentation</li>
</ul>

<p>This is but a model for beginners. For state of the art solutions of the problem, you can have a look at <a href="http://torch.ch/blog/2015/09/07/spatial_transformers.html">this</a>, where the authors achieve 99.61% accuracy with a specialized layer called Spatial Transformer layer.</p>

<h3 id="conclusion">Conclusion</h3>

<p>In this tutorial, we have learned how to use convolutional networks to solve a computer vision problem.
We have used keras deep learning framework to implement convnets in python.
We have achieved performance close to human level performance.
We also have seen a way to improve the accuracy of the model: by augmentation of the training data.</p>

<p>References:</p>

<ol>
  <li>Stallkamp, Johannes, et al. “<a href="http://image.diku.dk/igel/paper/MvCBMLAfTSR.pdf">Man vs. computer: Benchmarking machine learning algorithms for traffic sign recognition.</a>” Neural networks 32 (2012): 323-332.</li>
</ol>

          </section>

      </article>
    
  </div>

  <nav role="navigation">
    
    <div class="pagination">
      
        <a href="http://chsasank.github.io/">« Prev</a>
      

      
        
          <a href="http://chsasank.github.io/">1</a>
        
      
        
          <em>2</em>
        
      
        
          <a href="http://chsasank.github.io/page3">3</a>
        
      
        
          <a href="http://chsasank.github.io/page4">4</a>
        
      
        
          <a href="http://chsasank.github.io/page5">5</a>
        
      
        
          <a href="http://chsasank.github.io/page6">6</a>
        
      
        
          <a href="http://chsasank.github.io/page7">7</a>
        
      
        
          <a href="http://chsasank.github.io/page8">8</a>
        
      

      
        <a href="http://chsasank.github.io/page3">Next »</a>
      
    </div>
    
  </nav>

</main>

<footer class="site-footer">
	<script type="text/javascript" src="./Sasank&#39;s Blog_files/MathJax.js">
	</script>
	<script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	  ga('create', 'UA-47062272-2', 'auto');
	  ga('send', 'pageview');

	</script>
   <section class="copyright">All content copyright <a href="mailto:sasankchilamkurthy@gmail.com">Sasank Chilamkurthy</a> © 2017 • All rights reserved.</section>
</footer>


  

<div style="position: absolute; width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px; margin: 0px;"><div id="MathJax_Font_Test" style="position: absolute; visibility: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px; margin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; font-size: 40px; font-weight: normal; font-style: normal; font-family: STIXSizeOneSym, sans-serif;"></div></div></body></html>