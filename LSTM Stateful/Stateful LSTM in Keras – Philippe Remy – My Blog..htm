<!DOCTYPE html>
<!-- saved from url=(0050)http://philipperemy.github.io/keras-stateful-lstm/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Stateful LSTM in Keras – Philippe Remy – My Blog.</title>

        
    
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">

    
    <meta name="description" content="We will look at a very simple example to understand the mysterious stateful mode available for Long Short Term Memory models in Keras (a popular Deep Learning framework).">
    <meta property="og:description" content="We will look at a very simple example to understand the mysterious stateful mode available for Long Short Term Memory models in Keras (a popular Deep Learning framework).">
    
    <meta name="author" content="Philippe Remy">

    <script async="" src="./Stateful LSTM in Keras – Philippe Remy – My Blog._files/analytics.js"></script><script type="text/javascript" src="./Stateful LSTM in Keras – Philippe Remy – My Blog._files/MathJax.js"></script>
    <link rel="shortcut icon" type="image/x-icon" href="http://philipperemy.github.io/favicon.ico?">
    
    <meta property="og:title" content="Stateful LSTM in Keras">
    <meta property="twitter:title" content="Stateful LSTM in Keras">
    


    <!--[if lt IE 9]>
      <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <link rel="stylesheet" type="text/css" href="./Stateful LSTM in Keras – Philippe Remy – My Blog._files/style.css">
    <link rel="alternate" type="application/rss+xml" title="Philippe Remy - My Blog." href="http://philipperemy.github.io/feed.xml">

    <!-- Created with Jekyll Now - http://github.com/barryclark/jekyll-now -->
  <script src="./Stateful LSTM in Keras – Philippe Remy – My Blog._files/embed.js" data-timestamp="1493010962637"></script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><style type="text/css">.MathJax_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}
.MathJax .merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MathJax .MJX-monospace {font-family: monospace}
.MathJax .MJX-sans-serif {font-family: sans-serif}
#MathJax_Tooltip {background-color: InfoBackground; color: InfoText; border: 1px solid black; box-shadow: 2px 2px 5px #AAAAAA; -webkit-box-shadow: 2px 2px 5px #AAAAAA; -moz-box-shadow: 2px 2px 5px #AAAAAA; -khtml-box-shadow: 2px 2px 5px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true'); padding: 3px 4px; z-index: 401; position: absolute; left: 0; top: 0; width: auto; height: auto; display: none}
.MathJax {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}
.MathJax:focus, body :focus .MathJax {display: inline-table}
.MathJax.MathJax_FullWidth {text-align: center; display: table-cell!important; width: 10000em!important}
.MathJax img, .MathJax nobr, .MathJax a {border: 0; padding: 0; margin: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; vertical-align: 0; line-height: normal; text-decoration: none}
img.MathJax_strut {border: 0!important; padding: 0!important; margin: 0!important; vertical-align: 0!important}
.MathJax span {display: inline; position: static; border: 0; padding: 0; margin: 0; vertical-align: 0; line-height: normal; text-decoration: none}
.MathJax nobr {white-space: nowrap!important}
.MathJax img {display: inline!important; float: none!important}
.MathJax * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}
.MathJax_Processing {visibility: hidden; position: fixed; width: 0; height: 0; overflow: hidden}
.MathJax_Processed {display: none!important}
.MathJax_ExBox {display: block!important; overflow: hidden; width: 1px; height: 60ex; min-height: 0; max-height: none}
.MathJax .MathJax_EmBox {display: block!important; overflow: hidden; width: 1px; height: 60em; min-height: 0; max-height: none}
.MathJax_LineBox {display: table!important}
.MathJax_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}
.MathJax .MathJax_HitBox {cursor: text; background: white; opacity: 0; filter: alpha(opacity=0)}
.MathJax .MathJax_HitBox * {filter: none; opacity: 1; background: transparent}
#MathJax_Tooltip * {filter: none; opacity: 1; background: transparent}
@font-face {font-family: MathJax_Blank; src: url('about:blank')}
.MathJax .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><link rel="preload" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.5f04e83cf97ee6a6cf16dc8e296ed78d.css"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.08b03b11c747b79c4d4135b49e2f8725.js"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.987c6346e2effb8e4f350d48ecf53d13.js"><link rel="preload" as="script" href="https://disqus.com/next/config.js"><script src="./Stateful LSTM in Keras – Philippe Remy – My Blog._files/alfie.f51946af45e0b561c60f768335c9eb79.js" async="" charset="UTF-8"></script></head>

  <body><div style="visibility: hidden; overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal;"><div id="MathJax_Hidden"></div></div><div id="MathJax_Message" style="display: none;"></div>
    <div class="wrapper-masthead">
      <div class="container">
        <header class="masthead clearfix">
          <a href="http://philipperemy.github.io/" class="site-avatar"><img src="./Stateful LSTM in Keras – Philippe Remy – My Blog._files/4516927"></a>

          <div class="site-info">
            <h1 class="site-name"><a href="http://philipperemy.github.io/">Philippe Remy</a></h1>
            <p class="site-description">My Blog.</p>
          </div>

          <nav>
            <a href="http://philipperemy.github.io/">Blog</a>
            <a href="http://philipperemy.github.io/about">About</a>
          </nav>
        </header>
      </div>
    </div>

    <div id="main" role="main" class="container">
      <article class="post">
  <h1>Stateful LSTM in Keras</h1>

  <div class="entry">
    <p>The idea of this post is to provide a brief and clear understanding of the stateful mode, introduced for LSTM models in <a href="http://keras.io/">Keras</a>. If you have ever typed the words <code class="highlighter-rouge">lstm</code> and <code class="highlighter-rouge">stateful</code> in Keras, you may have seen that a significant proportion of all the issues are related to a misunderstanding of people trying to use this stateful mode. This post attempts to give insight to users on how to use for their applications.</p>

<p>I am not going to go into details on how Recurrent Neural Networks work. For this, I strongly suggest you to check the fantastic article made by Colah <a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/">Understanding LSTM Networks</a>.</p>

<p><img src="./Stateful LSTM in Keras – Philippe Remy – My Blog._files/keras_stateful_lstm_1.png" alt="png">
<em>Screenshot of the issues related to stateful LSTM in Keras</em></p>

<h1 id="introduction-of-stateful-lstms">Introduction of Stateful LSTMs</h1>

<p>In Recurrent Neural Networks, we are quickly confronted to the so-called gradient vanishing problem:</p>

<p><em>In machine learning, the vanishing gradient problem is a difficulty found in training artificial neural networks with gradient-based learning methods and backpropagation. In such methods, each of the neural network’s weights receives an update proportional to the gradient of the error function with respect to the current weight in each iteration of training. Traditional activation functions such as the hyperbolic tangent function have gradients in the range <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-1-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-1" style="width: 3.4em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.803em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1002.76em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-2"><span class="mo" id="MathJax-Span-3" style="font-family: STIXGeneral-Regular;">(</span><span class="mo" id="MathJax-Span-4" style="font-family: STIXGeneral-Regular;">−</span><span class="mn" id="MathJax-Span-5" style="font-family: STIXGeneral-Regular;">1</span><span class="mo" id="MathJax-Span-6" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-7" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">1</span><span class="mo" id="MathJax-Span-8" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-1">(−1, 1)</script> or <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-2-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-9" style="width: 2.573em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.114em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1002.07em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-10"><span class="mo" id="MathJax-Span-11" style="font-family: STIXGeneral-Regular;">[</span><span class="mn" id="MathJax-Span-12" style="font-family: STIXGeneral-Regular;">0</span><span class="mo" id="MathJax-Span-13" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-14" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">1</span><span class="mo" id="MathJax-Span-15" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">[</mo><mn>0</mn><mo>,</mo><mn>1</mn><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-2">[0, 1)</script>, and backpropagation computes gradients by the chain rule. This has the effect of multiplying n of these small numbers to compute gradients of the “front” layers in an n-layer network, meaning that the gradient (error signal) decreases exponentially with n and the front layers train very slowly.</em></p>

<p>One solution is to consider adding the updates instead of multiplying them, and this is exactly what the LSTM does. The state of every cell is updated in an additive way (Equation 9) such that the gradient hardly vanishes.</p>

<p><img src="./Stateful LSTM in Keras – Philippe Remy – My Blog._files/keras_stateful_lstm_2.png" alt="png">
<em>Equations of the LSTM model in Graves paper</em></p>

<p>The documentation of Keras for Recurrent Layers is well written and available here : <a href="http://keras.io/layers/recurrent/">http://keras.io/layers/recurrent/</a>. However I think it lacks of some self-explanatory examples and some corner cases to develop a strong understanding. Let’s first start by setting up some general questions:</p>

<h1 id="questions-and-answers">Questions and Answers</h1>

<ul>
  <li>
    <p><strong>I’m given a big sequence (e.g. Time Series) and I split it into smaller sequences to construct my input matrix <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-3-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-16" style="width: 0.86em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.68em; height: 0px; font-size: 123%;"><span style="position: absolute; clip: rect(1.719em 1000.68em 2.622em -999.998em); top: -2.482em; left: 0em;"><span class="mrow" id="MathJax-Span-17"><span class="mi" id="MathJax-Span-18" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.047em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.486em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.892em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></span></span><script type="math/tex" id="MathJax-Element-3">X</script>. Is it possible that the LSTM may find dependencies between the sequences?</strong>
<br> No it’s not possible unless you go for the stateful LSTM. Most of the problems can be solved with stateless LSTM so if you go for the stateful mode, make sure you really need it. In stateless mode, long term memory does not mean that the LSTM will remember the content of the previous batches.</p>
  </li>
  <li>
    <p><strong>Why do we make the difference between stateless and stateful LSTM in Keras?</strong>
<br> A LSTM has cells and is therefore stateful by definition (not the same stateful meaning as used in Keras). Fabien Chollet gives this definition of statefulness:
<br> <em>stateful: Boolean (default False). If True, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch.</em>
<br> <br> Said differently, whenever you train or test your LSTM, you first have to build your input matrix <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-4-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-19" style="width: 0.783em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.645em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.747em 1000.64em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-20"><span class="mi" id="MathJax-Span-21" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.892em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></span></span><script type="math/tex" id="MathJax-Element-4">X</script> of shape <code class="highlighter-rouge">nb_samples, timesteps, input_dim</code> where your batch size divides <code class="highlighter-rouge">nb_samples</code>. For instance, if <code class="highlighter-rouge">nb_samples=1024</code> and <code class="highlighter-rouge">batch_size=64</code>, it means that your model will receive blocks of 64 samples, compute each output (whatever the number of <code class="highlighter-rouge">timesteps</code> is for every sample), average the gradients and propagate it to update the parameters vector.
<br> <br> By default, Keras shuffles (permutes) the samples in <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-5-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-22" style="width: 0.783em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.645em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.747em 1000.64em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-23"><span class="mi" id="MathJax-Span-24" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.892em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></span></span><script type="math/tex" id="MathJax-Element-5">X</script> and the dependencies between <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-6-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-25" style="width: 1.058em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.38em 1000.88em 2.436em -999.998em); top: -2.156em; left: 0em;"><span class="mrow" id="MathJax-Span-26"><span class="msubsup" id="MathJax-Span-27"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-28" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.599em;"><span class="mi" id="MathJax-Span-29" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.16em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.219em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>X</mi><mi>i</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-6">X_i</script> and <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-7-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-30" style="width: 2.068em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.701em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.38em 1001.7em 2.482em -999.998em); top: -2.156em; left: 0em;"><span class="mrow" id="MathJax-Span-31"><span class="msubsup" id="MathJax-Span-32"><span style="display: inline-block; position: relative; width: 1.701em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-33" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.599em;"><span class="texatom" id="MathJax-Span-34"><span class="mrow" id="MathJax-Span-35"><span class="mi" id="MathJax-Span-36" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span class="mo" id="MathJax-Span-37" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">+</span><span class="mn" id="MathJax-Span-38" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">1</span></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.16em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>X</mi><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub></math></span></span><script type="math/tex" id="MathJax-Element-7">X_{i+1}</script> are lost. Let’s assume there’s no shuffling in our explanation.
<br> <br> If the model is stateless, the cell states are reset at each sequence. With the stateful model, all the states are propagated to the next batch. It means that the state of the sample located at index <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-8-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-39" style="width: 0.37em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.278em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.747em 1000.28em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-40"><span class="mi" id="MathJax-Span-41" style="font-family: STIXGeneral-Italic;">i</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.892em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math></span></span><script type="math/tex" id="MathJax-Element-8">i</script>, <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-9-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-42" style="width: 1.058em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.38em 1000.88em 2.436em -999.998em); top: -2.156em; left: 0em;"><span class="mrow" id="MathJax-Span-43"><span class="msubsup" id="MathJax-Span-44"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-45" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.599em;"><span class="mi" id="MathJax-Span-46" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.16em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.219em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>X</mi><mi>i</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-9">X_i</script> will be used in the computation of the sample <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-10-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-47" style="width: 2.39em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.977em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.38em 1001.98em 2.482em -999.998em); top: -2.156em; left: 0em;"><span class="mrow" id="MathJax-Span-48"><span class="msubsup" id="MathJax-Span-49"><span style="display: inline-block; position: relative; width: 1.977em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-50" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.599em;"><span class="texatom" id="MathJax-Span-51"><span class="mrow" id="MathJax-Span-52"><span class="mi" id="MathJax-Span-53" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span class="mo" id="MathJax-Span-54" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">+</span><span class="mi" id="MathJax-Span-55" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">b</span><span class="mi" id="MathJax-Span-56" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">s</span></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.16em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>X</mi><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mo>+</mo><mi>b</mi><mi>s</mi></mrow></msub></math></span></span><script type="math/tex" id="MathJax-Element-10">X_{i+bs}</script> in the next batch, where <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-11-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-57" style="width: 1.058em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1000.83em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-58"><span class="mi" id="MathJax-Span-59" style="font-family: STIXGeneral-Italic;">b</span><span class="mi" id="MathJax-Span-60" style="font-family: STIXGeneral-Italic;">s</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.947em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi><mi>s</mi></math></span></span><script type="math/tex" id="MathJax-Element-11">bs</script> is the batch size (no shuffling).</p>
  </li>
  <li>
    <p><strong>Why do Keras require the batch size in stateful mode?</strong>
<br> When the model is stateless, Keras allocates an array for the states of size <code class="highlighter-rouge">output_dim</code> (understand number of cells in your LSTM). At each sequence processing, this state array is reset.
<br> <br> In Stateful model, Keras must propagate the previous states for each sample across the batches. Referring to the explanation above, a sample at index <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-12-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-61" style="width: 0.37em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.278em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.747em 1000.28em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-62"><span class="mi" id="MathJax-Span-63" style="font-family: STIXGeneral-Italic;">i</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.892em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math></span></span><script type="math/tex" id="MathJax-Element-12">i</script> in batch #1 (<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-13-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-64" style="width: 2.39em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.977em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.38em 1001.98em 2.482em -999.998em); top: -2.156em; left: 0em;"><span class="mrow" id="MathJax-Span-65"><span class="msubsup" id="MathJax-Span-66"><span style="display: inline-block; position: relative; width: 1.977em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-67" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.599em;"><span class="texatom" id="MathJax-Span-68"><span class="mrow" id="MathJax-Span-69"><span class="mi" id="MathJax-Span-70" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span class="mo" id="MathJax-Span-71" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">+</span><span class="mi" id="MathJax-Span-72" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">b</span><span class="mi" id="MathJax-Span-73" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">s</span></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.16em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>X</mi><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mo>+</mo><mi>b</mi><mi>s</mi></mrow></msub></math></span></span><script type="math/tex" id="MathJax-Element-13">X_{i+bs}</script>) will know the states of the sample <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-14-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-74" style="width: 0.37em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.278em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.747em 1000.28em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-75"><span class="mi" id="MathJax-Span-76" style="font-family: STIXGeneral-Italic;">i</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.892em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>i</mi></math></span></span><script type="math/tex" id="MathJax-Element-14">i</script> in batch #0 (<span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-15-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-77" style="width: 1.058em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.38em 1000.88em 2.436em -999.998em); top: -2.156em; left: 0em;"><span class="mrow" id="MathJax-Span-78"><span class="msubsup" id="MathJax-Span-79"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-80" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.599em;"><span class="mi" id="MathJax-Span-81" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.16em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.219em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>X</mi><mi>i</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-15">X_i</script>). In this case, the structure to store the states is of the shape <code class="highlighter-rouge">(batch_size, output_dim)</code>. This is the reason why you have to specify the batch size at the creation of the LSTM. If you don’t do so, Keras may raise an error to remind you: <em>If a RNN is stateful, a complete input_shape must be provided (including batch size).</em></p>
  </li>
</ul>

<h1 id="self-explanatory-examples-of-stateful-lstms">Self-explanatory Examples of Stateful LSTMs</h1>

<p>Let’s consider the easiest example where <code class="highlighter-rouge">batch_size=1</code> and <code class="highlighter-rouge">shuffle=False</code> to avoid any confusions.</p>

<p>Let the input matrix <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-16-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-82" style="width: 0.783em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.645em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.747em 1000.64em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-83"><span class="mi" id="MathJax-Span-84" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.892em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></span></span><script type="math/tex" id="MathJax-Element-16">X</script> be of the arbitrary shape <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-17-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;1200&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;20&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-85" style="width: 4.961em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.089em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1004.04em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-86"><span class="mo" id="MathJax-Span-87" style="font-family: STIXGeneral-Regular;">(</span><span class="mn" id="MathJax-Span-88" style="font-family: STIXGeneral-Regular;">1200</span><span class="mo" id="MathJax-Span-89" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-90" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">20</span><span class="mo" id="MathJax-Span-91" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mn>1200</mn><mo>,</mo><mn>20</mn><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-17">(1200, 20)</script>. Those values are totally arbitrary, trust me! Let’s also assume that <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-18-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-92" style="width: 0.783em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.645em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.747em 1000.64em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-93"><span class="mi" id="MathJax-Span-94" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.892em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></span></span><script type="math/tex" id="MathJax-Element-18">X</script> is made exclusively of zeros except in the first column where exactly half of the values are 1.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">N_train</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="kn">from</span> <span class="nn">numpy.random</span> <span class="kn">import</span> <span class="n">choice</span>
<span class="n">one_indexes</span> <span class="o">=</span> <span class="n">choice</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="n">N_train</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="n">N_train</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">replace</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">X_train</span><span class="p">[</span><span class="n">one_indexes</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c"># very long term memory.</span></code></pre></figure>

<p>The first column is also stored in <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-19-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-95" style="width: 0.783em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.645em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.747em 1000.64em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-96"><span class="mi" id="MathJax-Span-97" style="font-family: STIXGeneral-Italic;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.892em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Y</mi></math></span></span><script type="math/tex" id="MathJax-Element-19">Y</script> and it will be the target of the model. In other words, our model must understand that if the first value of the sequence is 1, then the result is 1, 0 otherwise.</p>

<p>We split <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-20-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-98" style="width: 2.895em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.39em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1002.34em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-99"><span class="mo" id="MathJax-Span-100" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-101" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span class="mo" id="MathJax-Span-102" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-103" style="font-family: STIXGeneral-Italic; padding-left: 0.186em;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span><span class="mo" id="MathJax-Span-104" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>X</mi><mo>,</mo><mi>Y</mi><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-20">(X, Y)</script> in training (1000 rows) and validation sets (200 rows).</p>

<p>Now that we have the setup, let’s try to illustrate each point that we have discussed above.</p>

<h2 id="impact-of-sequences-subsampling">Impact of sequences subsampling</h2>

<p>We consider a stateless LSTM in our first experiment and our dataset <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-21-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-105" style="width: 2.895em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.39em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1002.34em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-106"><span class="mo" id="MathJax-Span-107" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-108" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span class="mo" id="MathJax-Span-109" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-110" style="font-family: STIXGeneral-Italic; padding-left: 0.186em;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span><span class="mo" id="MathJax-Span-111" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>X</mi><mo>,</mo><mi>Y</mi><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-21">(X, Y)</script>. Our objective is to prove that if we split the big sequences contained in <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-22-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-112" style="width: 0.783em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.645em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.747em 1000.64em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-113"><span class="mi" id="MathJax-Span-114" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.892em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi></math></span></span><script type="math/tex" id="MathJax-Element-22">X</script> into smaller sequence, the model cannot converge. The function that we use to split a big sequence into subsequences is:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">prepare_sequences</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">window_length</span><span class="p">):</span>
    <span class="n">windows</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">windows_y</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">sequence</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">x_train</span><span class="p">):</span>
        <span class="n">len_seq</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">sequence</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">window_start</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">len_seq</span> <span class="o">-</span> <span class="n">window_length</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">window_end</span> <span class="o">=</span> <span class="n">window_start</span> <span class="o">+</span> <span class="n">window_length</span>
            <span class="n">window</span> <span class="o">=</span> <span class="n">sequence</span><span class="p">[</span><span class="n">window_start</span><span class="p">:</span><span class="n">window_end</span><span class="p">]</span>
            <span class="n">windows</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
            <span class="n">windows_y</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">y_train</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">windows</span><span class="p">),</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">windows_y</span><span class="p">)</span></code></pre></figure>

<p>As an example, if we have <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-23-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-115" style="width: 8.359em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.889em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1006.8em 2.803em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-116"><span class="mi" id="MathJax-Span-117" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span class="mo" id="MathJax-Span-118" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mo" id="MathJax-Span-119" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">[</span><span class="mn" id="MathJax-Span-120" style="font-family: STIXGeneral-Regular;">1</span><span class="mo" id="MathJax-Span-121" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-122" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">0</span><span class="mo" id="MathJax-Span-123" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-124" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">0</span><span class="mo" id="MathJax-Span-125" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-126" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">0</span><span class="mo" id="MathJax-Span-127" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-128" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">0</span><span class="mo" id="MathJax-Span-129" style="font-family: STIXGeneral-Regular;">]</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.219em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>X</mi><mo>=</mo><mo stretchy="false">[</mo><mn>1</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo stretchy="false">]</mo></math></span></span><script type="math/tex" id="MathJax-Element-23">X = [1, 0, 0, 0, 0]</script>, <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-24-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-130" style="width: 3.033em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.482em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1002.39em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-131"><span class="mi" id="MathJax-Span-132" style="font-family: STIXGeneral-Italic;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span><span class="mo" id="MathJax-Span-133" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mn" id="MathJax-Span-134" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">1</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.947em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Y</mi><mo>=</mo><mn>1</mn></math></span></span><script type="math/tex" id="MathJax-Element-24">Y = 1</script> and if <code class="highlighter-rouge">window_length=2</code>, the output will be:</p>

<p><span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-25-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-135" style="width: 16.118em; display: inline-block;"><span style="display: inline-block; position: relative; width: 13.317em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1013.23em 2.803em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-136"><span class="msubsup" id="MathJax-Span-137"><span style="display: inline-block; position: relative; width: 1.609em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-138" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.599em;"><span class="texatom" id="MathJax-Span-139"><span class="mrow" id="MathJax-Span-140"><span class="mi" id="MathJax-Span-141" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">o</span><span class="mi" id="MathJax-Span-142" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">u</span><span class="mi" id="MathJax-Span-143" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-144" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mo" id="MathJax-Span-145" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">[</span><span class="mo" id="MathJax-Span-146" style="font-family: STIXGeneral-Regular;">[</span><span class="mn" id="MathJax-Span-147" style="font-family: STIXGeneral-Regular;">1</span><span class="mo" id="MathJax-Span-148" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-149" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">0</span><span class="mo" id="MathJax-Span-150" style="font-family: STIXGeneral-Regular;">]</span><span class="mo" id="MathJax-Span-151" style="font-family: STIXGeneral-Regular;">,</span><span class="mo" id="MathJax-Span-152" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">[</span><span class="mn" id="MathJax-Span-153" style="font-family: STIXGeneral-Regular;">0</span><span class="mo" id="MathJax-Span-154" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-155" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">0</span><span class="mo" id="MathJax-Span-156" style="font-family: STIXGeneral-Regular;">]</span><span class="mo" id="MathJax-Span-157" style="font-family: STIXGeneral-Regular;">,</span><span class="mo" id="MathJax-Span-158" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">[</span><span class="mn" id="MathJax-Span-159" style="font-family: STIXGeneral-Regular;">0</span><span class="mo" id="MathJax-Span-160" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-161" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">0</span><span class="mo" id="MathJax-Span-162" style="font-family: STIXGeneral-Regular;">]</span><span class="mo" id="MathJax-Span-163" style="font-family: STIXGeneral-Regular;">,</span><span class="mo" id="MathJax-Span-164" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">[</span><span class="mn" id="MathJax-Span-165" style="font-family: STIXGeneral-Regular;">0</span><span class="mo" id="MathJax-Span-166" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-167" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">0</span><span class="mo" id="MathJax-Span-168" style="font-family: STIXGeneral-Regular;">]</span><span class="mo" id="MathJax-Span-169" style="font-family: STIXGeneral-Regular;">]</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.219em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>X</mi><mrow class="MJX-TeXAtom-ORD"><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>=</mo><mo stretchy="false">[</mo><mo stretchy="false">[</mo><mn>1</mn><mo>,</mo><mn>0</mn><mo stretchy="false">]</mo><mo>,</mo><mo stretchy="false">[</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo stretchy="false">]</mo><mo>,</mo><mo stretchy="false">[</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo stretchy="false">]</mo><mo>,</mo><mo stretchy="false">[</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo stretchy="false">]</mo><mo stretchy="false">]</mo></math></span></span><script type="math/tex" id="MathJax-Element-25">X_{out} = [[1, 0], [0, 0], [0, 0], [0, 0]]</script>, <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-26-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-170" style="width: 8.313em; display: inline-block;"><span style="display: inline-block; position: relative; width: 6.843em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1006.75em 2.803em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-171"><span class="msubsup" id="MathJax-Span-172"><span style="display: inline-block; position: relative; width: 1.563em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-173" style="font-family: STIXGeneral-Italic;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.553em;"><span class="texatom" id="MathJax-Span-174"><span class="mrow" id="MathJax-Span-175"><span class="mi" id="MathJax-Span-176" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">o</span><span class="mi" id="MathJax-Span-177" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">u</span><span class="mi" id="MathJax-Span-178" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">t<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-179" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mo" id="MathJax-Span-180" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">[</span><span class="mn" id="MathJax-Span-181" style="font-family: STIXGeneral-Regular;">1</span><span class="mo" id="MathJax-Span-182" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-183" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">1</span><span class="mo" id="MathJax-Span-184" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-185" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">1</span><span class="mo" id="MathJax-Span-186" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-187" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">1</span><span class="mo" id="MathJax-Span-188" style="font-family: STIXGeneral-Regular;">]</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.219em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>Y</mi><mrow class="MJX-TeXAtom-ORD"><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>=</mo><mo stretchy="false">[</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo>,</mo><mn>1</mn><mo stretchy="false">]</mo></math></span></span><script type="math/tex" id="MathJax-Element-26">Y_{out} = [1, 1, 1, 1]</script>. The operation is not destructive but reversible. We repeat the procedure for every <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-27-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-189" style="width: 3.4em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.803em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1002.76em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-190"><span class="mo" id="MathJax-Span-191" style="font-family: STIXGeneral-Regular;">(</span><span class="msubsup" id="MathJax-Span-192"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-193" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.599em;"><span class="mi" id="MathJax-Span-194" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-195" style="font-family: STIXGeneral-Regular;">,</span><span class="msubsup" id="MathJax-Span-196" style="padding-left: 0.186em;"><span style="display: inline-block; position: relative; width: 0.829em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-197" style="font-family: STIXGeneral-Italic;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.553em;"><span class="mi" id="MathJax-Span-198" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-199" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo>,</mo><msub><mi>Y</mi><mi>i</mi></msub><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-27">(X_i, Y_i)</script> to re create our new matrices <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-28-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-200" style="width: 2.895em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.39em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1002.34em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-201"><span class="mo" id="MathJax-Span-202" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-203" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span class="mo" id="MathJax-Span-204" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-205" style="font-family: STIXGeneral-Italic; padding-left: 0.186em;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span><span class="mo" id="MathJax-Span-206" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>X</mi><mo>,</mo><mi>Y</mi><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-28">(X, Y)</script> that will used as inputs to the LSTM.</p>

<p>With <code class="highlighter-rouge">window_length=10</code>, the shapes become:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>x_train shape: (11000, 10, 1)
y_train shape: (11000, 1)
x_test shape: (2200, 10, 1)
y_test shape: (2200, 1)
</code></pre>
</div>

<p>instead of (without subsequences sampling):</p>

<div class="highlighter-rouge"><pre class="highlight"><code>x_train shape: (1000, 20, 1)
y_train shape: (1000, 1)
x_test shape: (200, 20, 1)
y_test shape: (200, 1)
</code></pre>
</div>

<p>Indeed in a sequence of length <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-29-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mn&gt;20&lt;/mn&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-207" style="width: 1.242em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.012em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1000.97em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-208"><span class="mn" id="MathJax-Span-209" style="font-family: STIXGeneral-Regular;">20</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.947em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>20</mn></math></span></span><script type="math/tex" id="MathJax-Element-29">20</script>, we have exactly <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-30-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mn&gt;20&lt;/mn&gt;&lt;mo&gt;&amp;#x2212;&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-210" style="width: 6.614em; display: inline-block;"><span style="display: inline-block; position: relative; width: 5.466em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1005.42em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-211"><span class="mo" id="MathJax-Span-212" style="font-family: STIXGeneral-Regular;">(</span><span class="mn" id="MathJax-Span-213" style="font-family: STIXGeneral-Regular;">20</span><span class="mo" id="MathJax-Span-214" style="font-family: STIXGeneral-Regular; padding-left: 0.232em;">−</span><span class="mn" id="MathJax-Span-215" style="font-family: STIXGeneral-Regular; padding-left: 0.232em;">10</span><span class="mo" id="MathJax-Span-216" style="font-family: STIXGeneral-Regular; padding-left: 0.232em;">+</span><span class="mn" id="MathJax-Span-217" style="font-family: STIXGeneral-Regular; padding-left: 0.232em;">1</span><span class="mo" id="MathJax-Span-218" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mn>20</mn><mo>−</mo><mn>10</mn><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-30">(20-10+1)</script> sequences of length <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-31-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-219" style="width: 1.242em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.012em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1000.97em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-220"><span class="mn" id="MathJax-Span-221" style="font-family: STIXGeneral-Regular;">10</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.947em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>10</mn></math></span></span><script type="math/tex" id="MathJax-Element-31">10</script> (sketch it if you’re not convinced). Because we have <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-32-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mn&gt;1000&lt;/mn&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-222" style="width: 2.482em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.022em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1001.98em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-223"><span class="mn" id="MathJax-Span-224" style="font-family: STIXGeneral-Regular;">1000</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.947em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>1000</mn></math></span></span><script type="math/tex" id="MathJax-Element-32">1000</script> samples (sequences) in the training set, we have <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-33-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mn&gt;1000&lt;/mn&gt;&lt;mo&gt;&amp;#x2217;&lt;/mo&gt;&lt;mn&gt;11&lt;/mn&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;11000&lt;/mn&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-225" style="width: 9.461em; display: inline-block;"><span style="display: inline-block; position: relative; width: 7.808em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1007.76em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-226"><span class="mn" id="MathJax-Span-227" style="font-family: STIXGeneral-Regular;">1000</span><span class="mo" id="MathJax-Span-228" style="font-family: STIXGeneral-Regular; padding-left: 0.232em;">∗</span><span class="mn" id="MathJax-Span-229" style="font-family: STIXGeneral-Regular; padding-left: 0.232em;">11</span><span class="mo" id="MathJax-Span-230" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mn" id="MathJax-Span-231" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">11000</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.947em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>1000</mn><mo>∗</mo><mn>11</mn><mo>=</mo><mn>11000</mn></math></span></span><script type="math/tex" id="MathJax-Element-33">1000*11 = 11000</script> subsequences in our resulting training set (we make sure to keep the order). Let’s feed that to our LSTM:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="s">'Building STATELESS model...'</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">LSTM</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">return_sequences</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">stateful</span><span class="o">=</span><span class="bp">False</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'sigmoid'</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="n">loss</span><span class="o">=</span><span class="s">'binary_crossentropy'</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">=</span><span class="s">'adam'</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s">'accuracy'</span><span class="p">])</span>
<span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">nb_epoch</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span>
          <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">),</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">score</span><span class="p">,</span> <span class="n">acc</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">evaluate</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span></code></pre></figure>

<p>Because the targets <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-34-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-232" style="width: 0.783em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.645em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.747em 1000.64em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-233"><span class="mi" id="MathJax-Span-234" style="font-family: STIXGeneral-Italic;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.892em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>Y</mi></math></span></span><script type="math/tex" id="MathJax-Element-34">Y</script> are approximately equally distributed (half are 0, half are 1), the baseline is an accuracy of 0.5.</p>

<p>After 15 epochs, on this very simple task, we have:</p>

<p><code class="highlighter-rouge">Epoch 15/15 11000/11000 [==============================] - 21s - loss: 0.6623 - acc: 0.5343 - val_loss: 0.6606 - val_acc: 0.5455</code></p>

<p>The interpretation of this result is very clear. The LSTM cannot find the optimal solution when working with subsequences. On such an easy problem, we expect an accuracy of more than 0.99.</p>

<p>Activating the statefulness of the model does not help at all (we’re going to see why in the next section):</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">LSTM</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">batch_input_shape</span><span class="o">=</span><span class="p">(</span><span class="n">batch_size</span><span class="p">,</span> <span class="n">max_len</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">return_sequences</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">stateful</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span></code></pre></figure>

<p><code class="highlighter-rouge">Epoch 15/15 11000/11000 [==============================] - 20s - loss: 0.6964 - acc: 0.5222 - val_loss: 0.7046 - val_acc: 0.5000</code></p>

<p>As a conclusion, subsampling does not help the LSTM converge. So when you have a big time series (e.g. in financial markets), the lookback window length is crucial and can be found with <a href="http://philipperemy.github.io/visualization/">Bayesian Optimization</a> .</p>

<h2 id="mastering-stateful-models">Mastering stateful models</h2>

<p>Let’s consider the setup without sequences subsampling where the dimensions of our input matrices are:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>x_train shape: (1000, 20, 1)
y_train shape: (1000, 1)
x_test shape: (200, 20, 1)
y_test shape: (200, 1)
</code></pre>
</div>

<p>Also to make things easier, we consider <code class="highlighter-rouge">batch_size=1</code>. Our stateful model looks like this:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="s">'Build STATEFUL model...'</span><span class="p">)</span>
<span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">LSTM</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">batch_input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">return_sequences</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">stateful</span><span class="o">=</span><span class="bp">True</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">'sigmoid'</span><span class="p">))</span>
<span class="n">model</span><span class="o">.</span><span class="nb">compile</span><span class="p">(</span><span class="n">loss</span><span class="o">=</span><span class="s">'binary_crossentropy'</span><span class="p">,</span> <span class="n">optimizer</span><span class="o">=</span><span class="s">'adam'</span><span class="p">,</span> <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s">'accuracy'</span><span class="p">])</span></code></pre></figure>

<p>The idea is to split each sequence <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-35-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-235" style="width: 1.058em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.38em 1000.88em 2.436em -999.998em); top: -2.156em; left: 0em;"><span class="mrow" id="MathJax-Span-236"><span class="msubsup" id="MathJax-Span-237"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-238" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.599em;"><span class="mi" id="MathJax-Span-239" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.16em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.219em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>X</mi><mi>i</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-35">X_i</script> (of length <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-36-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mn&gt;20&lt;/mn&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-240" style="width: 1.242em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.012em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1000.97em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-241"><span class="mn" id="MathJax-Span-242" style="font-family: STIXGeneral-Regular;">20</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.947em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>20</mn></math></span></span><script type="math/tex" id="MathJax-Element-36">20</script>) into elements of size <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-37-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-243" style="width: 0.645em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.507em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1000.42em 2.665em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-244"><span class="mn" id="MathJax-Span-245" style="font-family: STIXGeneral-Regular;">1</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.053em; border-left: 0px solid; width: 0px; height: 0.947em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>1</mn></math></span></span><script type="math/tex" id="MathJax-Element-37">1</script> and feed them to the LSTM. Once the sequence is over, we manually reset the states of the LSTM to have a clean setup for the next one. For each element, we associate the related target <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-38-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-246" style="width: 1.012em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.829em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.38em 1000.83em 2.436em -999.998em); top: -2.156em; left: 0em;"><span class="mrow" id="MathJax-Span-247"><span class="msubsup" id="MathJax-Span-248"><span style="display: inline-block; position: relative; width: 0.829em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-249" style="font-family: STIXGeneral-Italic;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.553em;"><span class="mi" id="MathJax-Span-250" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.16em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.219em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>Y</mi><mi>i</mi></msub></math></span></span><script type="math/tex" id="MathJax-Element-38">Y_i</script>.</p>

<p>For instance, if we have <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-39-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-251" style="width: 9.093em; display: inline-block;"><span style="display: inline-block; position: relative; width: 7.486em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1007.39em 2.803em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-252"><span class="msubsup" id="MathJax-Span-253"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-254" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.599em;"><span class="mi" id="MathJax-Span-255" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-256" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mo" id="MathJax-Span-257" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">[</span><span class="mn" id="MathJax-Span-258" style="font-family: STIXGeneral-Regular;">1</span><span class="mo" id="MathJax-Span-259" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-260" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">0</span><span class="mo" id="MathJax-Span-261" style="font-family: STIXGeneral-Regular;">,</span><span class="mn" id="MathJax-Span-262" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">0</span><span class="mo" id="MathJax-Span-263" style="font-family: STIXGeneral-Regular;">.</span><span class="mo" id="MathJax-Span-264" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">.</span><span class="mo" id="MathJax-Span-265" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">.</span><span class="mo" id="MathJax-Span-266" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">,</span><span class="mn" id="MathJax-Span-267" style="font-family: STIXGeneral-Regular; padding-left: 0.186em;">0</span><span class="mo" id="MathJax-Span-268" style="font-family: STIXGeneral-Regular;">]</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.219em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>X</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">[</mo><mn>1</mn><mo>,</mo><mn>0</mn><mo>,</mo><mn>0</mn><mo>.</mo><mo>.</mo><mo>.</mo><mo>,</mo><mn>0</mn><mo stretchy="false">]</mo></math></span></span><script type="math/tex" id="MathJax-Element-39">X_i = [1, 0, 0 ..., 0]</script> and <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-40-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;msub&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-269" style="width: 3.997em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.308em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1003.22em 2.803em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-270"><span class="msubsup" id="MathJax-Span-271"><span style="display: inline-block; position: relative; width: 0.829em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-272" style="font-family: STIXGeneral-Italic;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.553em;"><span class="mi" id="MathJax-Span-273" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-274" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mo" id="MathJax-Span-275" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">[</span><span class="mn" id="MathJax-Span-276" style="font-family: STIXGeneral-Regular;">1</span><span class="mo" id="MathJax-Span-277" style="font-family: STIXGeneral-Regular;">]</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.219em; border-left: 0px solid; width: 0px; height: 1.114em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>Y</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo></math></span></span><script type="math/tex" id="MathJax-Element-40">Y_i = [1]</script>, we feed <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-41-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-278" style="width: 9.966em; display: inline-block;"><span style="display: inline-block; position: relative; width: 8.221em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1008.17em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-279"><span class="mo" id="MathJax-Span-280" style="font-family: STIXGeneral-Regular;">(</span><span class="mo" id="MathJax-Span-281" style="font-family: STIXGeneral-Regular;">(</span><span class="msubsup" id="MathJax-Span-282"><span style="display: inline-block; position: relative; width: 1.058em; height: 0px;"><span style="position: absolute; clip: rect(3.4em 1000.46em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-283" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.461em;"><span class="texatom" id="MathJax-Span-284"><span class="mrow" id="MathJax-Span-285"><span class="mi" id="MathJax-Span-286" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span class="mn" id="MathJax-Span-287" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">0</span></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-288" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mo" id="MathJax-Span-289" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">[</span><span class="mn" id="MathJax-Span-290" style="font-family: STIXGeneral-Regular;">1</span><span class="mo" id="MathJax-Span-291" style="font-family: STIXGeneral-Regular;">]</span><span class="mo" id="MathJax-Span-292" style="font-family: STIXGeneral-Regular;">,</span><span class="msubsup" id="MathJax-Span-293" style="padding-left: 0.186em;"><span style="display: inline-block; position: relative; width: 0.737em; height: 0px;"><span style="position: absolute; clip: rect(3.4em 1000.42em 4.318em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-294" style="font-family: STIXGeneral-Italic;">y</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.461em;"><span class="mi" id="MathJax-Span-295" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-296" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mo" id="MathJax-Span-297" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">[</span><span class="mn" id="MathJax-Span-298" style="font-family: STIXGeneral-Regular;">1</span><span class="mo" id="MathJax-Span-299" style="font-family: STIXGeneral-Regular;">]</span><span class="mo" id="MathJax-Span-300" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mn>0</mn></mrow></msub><mo>=</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>,</mo><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-41">((x_{i0}=[1], y_i=[1])</script>, <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-42-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-301" style="width: 9.552em; display: inline-block;"><span style="display: inline-block; position: relative; width: 7.899em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1007.85em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-302"><span class="mo" id="MathJax-Span-303" style="font-family: STIXGeneral-Regular;">(</span><span class="msubsup" id="MathJax-Span-304"><span style="display: inline-block; position: relative; width: 1.058em; height: 0px;"><span style="position: absolute; clip: rect(3.4em 1000.46em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-305" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.461em;"><span class="texatom" id="MathJax-Span-306"><span class="mrow" id="MathJax-Span-307"><span class="mi" id="MathJax-Span-308" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span class="mn" id="MathJax-Span-309" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">1</span></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-310" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mo" id="MathJax-Span-311" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">[</span><span class="mn" id="MathJax-Span-312" style="font-family: STIXGeneral-Regular;">0</span><span class="mo" id="MathJax-Span-313" style="font-family: STIXGeneral-Regular;">]</span><span class="mo" id="MathJax-Span-314" style="font-family: STIXGeneral-Regular;">,</span><span class="msubsup" id="MathJax-Span-315" style="padding-left: 0.186em;"><span style="display: inline-block; position: relative; width: 0.737em; height: 0px;"><span style="position: absolute; clip: rect(3.4em 1000.42em 4.318em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-316" style="font-family: STIXGeneral-Italic;">y</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.461em;"><span class="mi" id="MathJax-Span-317" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-318" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mo" id="MathJax-Span-319" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">[</span><span class="mn" id="MathJax-Span-320" style="font-family: STIXGeneral-Regular;">1</span><span class="mo" id="MathJax-Span-321" style="font-family: STIXGeneral-Regular;">]</span><span class="mo" id="MathJax-Span-322" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><msub><mi>x</mi><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mn>1</mn></mrow></msub><mo>=</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>,</mo><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-42">(x_{i1}=[0], y_i=[1])</script>,…, <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-43-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mrow class=&quot;MJX-TeXAtom-ORD&quot;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mn&gt;20&lt;/mn&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&quot;false&quot;&gt;]&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-323" style="width: 10.425em; display: inline-block;"><span style="display: inline-block; position: relative; width: 8.588em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1008.54em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-324"><span class="mo" id="MathJax-Span-325" style="font-family: STIXGeneral-Regular;">(</span><span class="msubsup" id="MathJax-Span-326"><span style="display: inline-block; position: relative; width: 1.426em; height: 0px;"><span style="position: absolute; clip: rect(3.4em 1000.46em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-327" style="font-family: STIXGeneral-Italic;">x<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.002em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.461em;"><span class="texatom" id="MathJax-Span-328"><span class="mrow" id="MathJax-Span-329"><span class="mi" id="MathJax-Span-330" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span class="mn" id="MathJax-Span-331" style="font-size: 70.7%; font-family: STIXGeneral-Regular;">20</span></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-332" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mo" id="MathJax-Span-333" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">[</span><span class="mn" id="MathJax-Span-334" style="font-family: STIXGeneral-Regular;">0</span><span class="mo" id="MathJax-Span-335" style="font-family: STIXGeneral-Regular;">]</span><span class="mo" id="MathJax-Span-336" style="font-family: STIXGeneral-Regular;">,</span><span class="msubsup" id="MathJax-Span-337" style="padding-left: 0.186em;"><span style="display: inline-block; position: relative; width: 0.737em; height: 0px;"><span style="position: absolute; clip: rect(3.4em 1000.42em 4.318em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-338" style="font-family: STIXGeneral-Italic;">y</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.461em;"><span class="mi" id="MathJax-Span-339" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-340" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">=</span><span class="mo" id="MathJax-Span-341" style="font-family: STIXGeneral-Regular; padding-left: 0.324em;">[</span><span class="mn" id="MathJax-Span-342" style="font-family: STIXGeneral-Regular;">1</span><span class="mo" id="MathJax-Span-343" style="font-family: STIXGeneral-Regular;">]</span><span class="mo" id="MathJax-Span-344" style="font-family: STIXGeneral-Regular;">)</span><span class="mo" id="MathJax-Span-345" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><msub><mi>x</mi><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mn>20</mn></mrow></msub><mo>=</mo><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>,</mo><msub><mi>y</mi><mi>i</mi></msub><mo>=</mo><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-43">(x_{i20}=[0], y_i=[1]))</script> to the LSTM.</p>

<p>The operation is not destructive but reversible. We repeat the procedure for every <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-44-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-346" style="width: 3.4em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.803em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1002.76em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-347"><span class="mo" id="MathJax-Span-348" style="font-family: STIXGeneral-Regular;">(</span><span class="msubsup" id="MathJax-Span-349"><span style="display: inline-block; position: relative; width: 0.875em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-350" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.599em;"><span class="mi" id="MathJax-Span-351" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-352" style="font-family: STIXGeneral-Regular;">,</span><span class="msubsup" id="MathJax-Span-353" style="padding-left: 0.186em;"><span style="display: inline-block; position: relative; width: 0.829em; height: 0px;"><span style="position: absolute; clip: rect(3.216em 1000.64em 4.135em -999.998em); top: -3.992em; left: 0em;"><span class="mi" id="MathJax-Span-354" style="font-family: STIXGeneral-Italic;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span><span style="position: absolute; top: -3.854em; left: 0.553em;"><span class="mi" id="MathJax-Span-355" style="font-size: 70.7%; font-family: STIXGeneral-Italic;">i</span><span style="display: inline-block; width: 0px; height: 3.997em;"></span></span></span></span><span class="mo" id="MathJax-Span-356" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo>,</mo><msub><mi>Y</mi><mi>i</mi></msub><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-44">(X_i, Y_i)</script> to re create our new matrices <span class="MathJax_Preview" style="color: inherit; display: none;"></span><span class="MathJax" id="MathJax-Element-45-Frame" tabindex="0" data-mathml="&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;/math&gt;" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-357" style="width: 2.895em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.39em; height: 0px; font-size: 121%;"><span style="position: absolute; clip: rect(1.701em 1002.34em 2.849em -999.998em); top: -2.523em; left: 0em;"><span class="mrow" id="MathJax-Span-358"><span class="mo" id="MathJax-Span-359" style="font-family: STIXGeneral-Regular;">(</span><span class="mi" id="MathJax-Span-360" style="font-family: STIXGeneral-Italic;">X<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.048em;"></span></span><span class="mo" id="MathJax-Span-361" style="font-family: STIXGeneral-Regular;">,</span><span class="mi" id="MathJax-Span-362" style="font-family: STIXGeneral-Italic; padding-left: 0.186em;">Y<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.094em;"></span></span><span class="mo" id="MathJax-Span-363" style="font-family: STIXGeneral-Regular;">)</span></span><span style="display: inline-block; width: 0px; height: 2.528em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.275em; border-left: 0px solid; width: 0px; height: 1.169em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>X</mi><mo>,</mo><mi>Y</mi><mo stretchy="false">)</mo></math></span></span><script type="math/tex" id="MathJax-Element-45">(X, Y)</script> that will used as inputs to the LSTM.</p>

<p>Because the LSTM is stateful, the state will be propagated to the next batch. Also because the <code class="highlighter-rouge">batch_size=1</code>, we are sure that the state of the last element will be used as input to the current element. The code is available below and is a bit more involved:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">print</span><span class="p">(</span><span class="s">'Train...'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">15</span><span class="p">):</span>
    <span class="n">mean_tr_acc</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">mean_tr_loss</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">X_train</span><span class="p">)):</span>
        <span class="n">y_true</span> <span class="o">=</span> <span class="n">y_train</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_len</span><span class="p">):</span>
            <span class="n">tr_loss</span><span class="p">,</span> <span class="n">tr_acc</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">train_on_batch</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
                                                   <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">y_true</span><span class="p">]))</span>
            <span class="n">mean_tr_acc</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tr_acc</span><span class="p">)</span>
            <span class="n">mean_tr_loss</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">tr_loss</span><span class="p">)</span>
        <span class="n">model</span><span class="o">.</span><span class="n">reset_states</span><span class="p">()</span>

    <span class="k">print</span><span class="p">(</span><span class="s">'accuracy training = {}'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">mean_tr_acc</span><span class="p">)))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'loss training = {}'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">mean_tr_loss</span><span class="p">)))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'___________________________________'</span><span class="p">)</span>

    <span class="n">mean_te_acc</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">mean_te_loss</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">X_test</span><span class="p">)):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_len</span><span class="p">):</span>
            <span class="n">te_loss</span><span class="p">,</span> <span class="n">te_acc</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">test_on_batch</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">X_test</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
                                                  <span class="n">y_test</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
            <span class="n">mean_te_acc</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">te_acc</span><span class="p">)</span>
            <span class="n">mean_te_loss</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">te_loss</span><span class="p">)</span>
        <span class="n">model</span><span class="o">.</span><span class="n">reset_states</span><span class="p">()</span>

        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_len</span><span class="p">):</span>
            <span class="n">y_pred</span> <span class="o">=</span> <span class="n">model</span><span class="o">.</span><span class="n">predict_on_batch</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">X_test</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
        <span class="n">model</span><span class="o">.</span><span class="n">reset_states</span><span class="p">()</span>

    <span class="k">print</span><span class="p">(</span><span class="s">'accuracy testing = {}'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">mean_te_acc</span><span class="p">)))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'loss testing = {}'</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">mean_te_loss</span><span class="p">)))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'___________________________________'</span><span class="p">)</span></code></pre></figure>

<p>Let’s see how the accuracy behaves in the same with our stateful model. As expected, after just a few epochs, our accuracy is very close to 1, which means that our model could successfully catch the pattern.</p>

<div class="highlighter-rouge"><pre class="highlight"><code>epoch = 1, accuracy training = 0.997300028801, accuracy testing = 1.0
epoch = 2, accuracy training = 1.0, accuracy testing = 1.0
</code></pre>
</div>

<p>Finally, let’s see how the stateless model would perform here:</p>

<p><code class="highlighter-rouge">model.add(LSTM(10, batch_input_shape=(1, 1, 1), return_sequences=False, stateful=False))</code></p>

<div class="highlighter-rouge"><pre class="highlight"><code>epoch = 1, accuracy training = 0.53409999609, accuracy testing = 0.524999976158
epoch = 2, accuracy training = 0.535149991512, accuracy testing = 0.524999976158
</code></pre>
</div>

<p>Not surprisingly, the model cannot converge because the state is not propagated across the elements.</p>

<p>The code was a bit more difficult to write because we have to manually call <code class="highlighter-rouge">model.reset_states()</code> at each new sequence processed. Another method to do that is to write a callback that reset the states at each sequence like this:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">max_len</span> <span class="o">=</span> <span class="mi">20</span>
<span class="k">class</span> <span class="nc">ResetStatesCallback</span><span class="p">(</span><span class="n">Callback</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">on_batch_begin</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">batch</span><span class="p">,</span> <span class="n">logs</span><span class="o">=</span><span class="p">{}):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">counter</span> <span class="o">%</span> <span class="n">max_len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">model</span><span class="o">.</span><span class="n">reset_states</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
        
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">X_train</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">expand_dims</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([[</span><span class="n">v</span><span class="p">]</span> <span class="o">*</span> <span class="n">max_len</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">y_train</span><span class="o">.</span><span class="n">flatten</span><span class="p">()])</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">model</span><span class="o">.</span><span class="n">fit</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">callbacks</span><span class="o">=</span><span class="p">[</span><span class="n">ResetStatesCallback</span><span class="p">()],</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span></code></pre></figure>

<div class="highlighter-rouge"><pre class="highlight"><code>Build STATEFUL model...
Epoch 1/10
20000/20000 [==============================] - 29s - loss: 0.0256 - acc: 0.9921    
Epoch 2/10
20000/20000 [==============================] - 29s - loss: 2.2883e-07 - acc: 1.0000 
</code></pre>
</div>
<p>Note: be careful as it seems that the callbacks are not properly called when using the parameter <code class="highlighter-rouge">validation_data</code> in <code class="highlighter-rouge">model.fit()</code>. You may have to do your validation/testing manually by calling <code class="highlighter-rouge">predict_on_batch()</code> or <code class="highlighter-rouge">test_on_batch()</code>.</p>

<p>Throughout this article, we came up with several toy examples that illustrate how to use stateful LSTM. Don’t forget to comment if you see any mistakes or some ways of improving the code.</p>

  </div>

  <div class="date">
    Written on July 30, 2016
  </div>
  
</article>

<br>

<div id="disqus_thread"><iframe id="dsq-app1" name="dsq-app1" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./Stateful LSTM in Keras – Philippe Remy – My Blog._files/saved_resource.html" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 8998px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></div>
<script>

/**
 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
/*
var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
    var d = document, s = d.createElement('script');
    s.src = '//philipperemy-github-io-1.disqus.com/embed.js';
    s.setAttribute('data-timestamp', +new Date());
    (d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the &lt;a href="https://disqus.com/?ref_noscript"&gt;comments powered by Disqus.&lt;/a&gt;</noscript>
                                    

    </div>

    <div class="wrapper-footer">
      <div class="container">
        <footer class="footer">
          



<a href="https://github.com/philipperemy"><i class="svg-icon github"></i></a>








        </footer>
      </div>
    </div>

    
	<!-- Google Analytics -->
	<script>
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

		ga('create', 'UA-79192452-1', 'auto');
		ga('send', 'pageview', {
		  'page': '/keras-stateful-lstm/',
		  'title': 'Stateful LSTM in Keras'
		});
	</script>
	<!-- End Google Analytics -->


  

<div style="position: absolute; width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px; margin: 0px;"><div id="MathJax_Font_Test" style="position: absolute; visibility: hidden; top: 0px; left: 0px; width: auto; padding: 0px; border: 0px; margin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; font-size: 40px; font-weight: normal; font-style: normal; font-family: STIXSizeOneSym, sans-serif;"></div></div><iframe style="display: none;" src="./Stateful LSTM in Keras – Philippe Remy – My Blog._files/saved_resource(1).html"></iframe></body></html>